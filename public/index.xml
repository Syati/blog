<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.syati.info/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Wed, 13 Jul 2016 01:01:50 JST</updated>
    
    <item>
      <title>うるさいよ &#39;You are running composer with xdebug enabled. This has a major impact on runtime performance&#39;</title>
      <link>http://blog.syati.info/post/php-composer/</link>
      <pubDate>Wed, 13 Jul 2016 01:01:50 JST</pubDate>
      
      <guid>http://blog.syati.info/post/php-composer/</guid>
      <description>

&lt;p&gt;最近、php を触る機会が増えたので、メモメモ。
composer 叩いたら xdebug を enable にしてると遅いよっていう以下のメッセージが流れるので composer 叩いた時に出ないようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;方法:1b16d1c75676533b4a2de7dd8fcb89c6&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;zsh を利用しているので .zshrc に以下を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias composer=&amp;quot;php -n /usr/local/bin/composer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:1b16d1c75676533b4a2de7dd8fcb89c6&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/31083195/disabling-xdebug-when-running-composer&#34;&gt;http://stackoverflow.com/questions/31083195/disabling-xdebug-when-running-composer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequelize Part 2 - リレーションについて</title>
      <link>http://blog.syati.info/post/sequelize_relation/</link>
      <pubDate>Sat, 02 Jan 2016 22:00:15 JST</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_relation/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/sequelize_getting_started/&#34;&gt;Sequelize Part 1&lt;/a&gt; で、なんとなくわかってきた！！と思うので、今回は、リレーションについて学ぶ。&lt;strong&gt;belongsTo, hasOne, hasMany, belongsToMany&lt;/strong&gt; の4つだけ。後、オプションを少し学べばやりたいことは大方出来るようになる。後々、WEBアプリケーションフレームワークから利用する際、ここら辺の理解は必須ですからね。&lt;/p&gt;

&lt;h2 id=&#34;1-リレーションの種類:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1. リレーションの種類&lt;/h2&gt;

&lt;p&gt;リレーションを理解するためには、&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/&#34;&gt;Relations / Associations&lt;/a&gt; を読み込まないと始まらない。結構ボリュームがあって、心折れそうになりますが！！実は大したことはないはず・・・。まずは、少しだけ用語の説明。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When calling a method such as User.hasOne(Project), we say that the User model (the model that the function is being invoked on) is the source and the Project model (the model being passed as an argument) is the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;単なる呼び方ですね。先に出てくるモデルが &lt;strong&gt;source&lt;/strong&gt; 。後に出てくるモデルが &lt;strong&gt;target&lt;/strong&gt; ですよってことですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 以下の場合
User.hasOne(Project)
// User モデルが source
// Project モデルが target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、外部キーがどちらに追加されるのかを明記するために利用する。リレーションは、以降の4種類（メソッド）ある。&lt;/p&gt;

&lt;h3 id=&#34;1-1-belongsto:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.1. belongsTo&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プレイヤ belongs to チーム&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Players

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;attributes&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TeamId (belongsTo によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Teams

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;attributes&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#belongsto&#34;&gt;belongsTo&lt;/a&gt; では &lt;strong&gt;source (Player)&lt;/strong&gt; に外部キー（&lt;strong&gt;TeamId&lt;/strong&gt;）が追加される。また、Player インスタンスは、&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/belongs-to/&#34;&gt;belongsTo - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※外部キーが camelCase&lt;/strong&gt; ！？という方は、&lt;a href=&#34;#2-2-underscored-外部キーの命名規則を-camelcase-から-underscored-にする:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.2. underscored: 外部キーの命名規則を camelCase から underscored にする&lt;/a&gt; を参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;1-2-hasone:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.2. hasOne&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ユーザ has one プロフィール&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = sequelize.define(&#39;User&#39;, {/* ... */})
var Profile = sequelize.define(&#39;Profile&#39;, {/* ... */})
 
User.hasOne(Profile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Profiles

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserId (hasOne によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;(http://docs.sequelizejs.com/en/latest/docs/associations/#hasone&#34;&gt;hasOne&lt;/a&gt; では &lt;strong&gt;target (Profile)&lt;/strong&gt; に外部キー（&lt;strong&gt;UserId&lt;/strong&gt;）が追加される。&lt;strong&gt;belongsTo とその点が違うことに注意&lt;/strong&gt;。また、User インスタンスは &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/has-one/&#34;&gt;hasOne - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;h3 id=&#34;1-3-hasmany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.3. hasMany&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プロジェクト has many ユーザ&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})
 
Project.hasMany(User)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記では、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProjectId (hasMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#one-to-many-associations&#34;&gt;hasMany&lt;/a&gt; では &lt;strong&gt;target (User)&lt;/strong&gt; に外部キー（&lt;strong&gt;ProjectId&lt;/strong&gt;）が追加される。これだけ見ると &lt;strong&gt;hasOne と同じじゃないか&lt;/strong&gt;と思うかもしれないが、インスタンスが持つメソッドが異なる。Project インスタンスは &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/has-many/&#34;&gt;hasMany - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;h3 id=&#34;1-4-belongstomany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.4. belongsToMany&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プロジェクトは複数のユーザを持ち、ユーザは複数のプロジェクトに属する&lt;/strong&gt; という &lt;strong&gt;多対多&lt;/strong&gt; の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})

Project.belongsToMany(User, {through: &#39;UserProjects&#39;});
User.belongsToMany(Project, {through: &#39;UserProjects&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserProjects   (through オプションで指定した名前のテーブル)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UserId    (belongsToMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProjectId (belongsToMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#belongs-to-many-associations&#34;&gt;belongsToMany&lt;/a&gt; では、&lt;strong&gt;through で指定した名前のテーブル&lt;/strong&gt;に双方のキー（ProjectId, UserId）が追加される。また、それぞれのインスタンスに以下のとおり(または &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/&#34;&gt;belongsToMany - api&lt;/a&gt;) メソッドが追加される。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This will add methods &lt;strong&gt;getUsers, setUsers, addUser,addUsers to Project&lt;/strong&gt;, and &lt;strong&gt;getProjects, setProjects and addProject, addProjects to User&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記の UserProjects （中間テーブル）を見ると分かると思いますが &lt;strong&gt;id&lt;/strong&gt; はありません。理由は以下のとおり。UserId, ProjectId の複合キーで十分なため、別にプライマリキー設ける必要ないでしょって話かな。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default the code above will add ProjectId and UserId to the UserProjects table, and remove any previously defined primary key attribute - the table will be uniquely identified by the combination of the keys of the two tables, and there is no reason to have other PK columns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただし UserProjects モデルを以下のように定義することで、&lt;strong&gt;id&lt;/strong&gt; を追加することや、&lt;strong&gt;status&lt;/strong&gt; カラムを中間テーブルに追加することができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})

var UserProjects = sequelize.define(&#39;UserProjects&#39;, {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    status: DataTypes.STRING
})

User.belongsToMany(Project, { through: UserProjects })
Project.belongsToMany(User, { through: UserProjects })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-その他-オプション:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2. その他、オプション&lt;/h2&gt;

&lt;h3 id=&#34;2-1-片方向と双方向:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.1. 片方向と双方向&lt;/h3&gt;

&lt;p&gt;以下の違いを覚えておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;片方向（one way）

&lt;ul&gt;
&lt;li&gt;belongsTo&lt;/li&gt;
&lt;li&gt;hasOne&lt;/li&gt;
&lt;li&gt;hasMany&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双方向 (two way)

&lt;ul&gt;
&lt;li&gt;belongsToMany&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;片方向とは、言葉の通りだが、一方からしか取得できないということである。例えば、&lt;strong&gt;プレイヤ belongs to チーム&lt;/strong&gt; という場合で考えると、&lt;strong&gt;プレイヤからチームを取得することは可能&lt;/strong&gt;だが、&lt;strong&gt;チームからプレイヤを取得することは不可能&lt;/strong&gt;ということである。以下コードサンプル。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team);

...

// インスタンス利用
// plyaer インスタンスから team を取得することは可能だが
player.getTeam()
// 以下のように team から プレイヤを取得することはできない
// team.getPlayers()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、&lt;strong&gt;片方向のメソッドを利用して、双方向から取得できるようにする&lt;/strong&gt;には、以下のようにモデルを定義してあげる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team); // belongsTo を利用
Team.hasMany(Player);   // hasMany を利用
...

// インスタンス利用
// plyaer インスタンスから team を取得することは可能かつ
player.getTeam()
// team から players を取得することが可能。
team.getPlayers()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;双方向については、上記のようなことをする必要はない。双方向を利用した際に、インスタンスにメソッドが追加されるため。&lt;a href=&#34;http://localhost:1313/post/sequelize_relation/#1-4-belongstomany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.4. belongsToMany&lt;/a&gt; 参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;2-2-underscored-外部キーの命名規則を-camelcase-から-underscored-にする:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.2. underscored: 外部キーの命名規則を camelCase から underscored にする&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Foreign keys&lt;/strong&gt; は camelCase になります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default casing is camelCase however if the source model is configured with underscored: true the foreignKey will be snake_case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;もし、&lt;strong&gt;underscored&lt;/strong&gt; のほうがいいよねって場合は、以下のようにしてあげる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {
    /* ... */
}, {
    underscored: true
});

var Team  = this.sequelize.define(&#39;Team&#39;, {/* ... */});

Player.belongsTo(Team);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Players

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;team_id (camelCase ではなく _ になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Teams

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-3-as-target-のモデル名を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.3. as: target のモデル名を任意に変更する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;as&lt;/strong&gt; オプションに任意の名前を与えることで、target のモデル名を変更できる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */})
  , Project = sequelize.define(&#39;Project&#39;, {/* ... */})

User.belongsTo(Project, {as: &#39;Prj&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PrjId (ProjectId ではなく as で指定した名前Id になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ここで注意する必要があるのは&lt;/strong&gt; リレーション(belongsToなど)を追加したときにインスタンスに追加されるメソッドである。今回の場合は User インスタンスのもつメソッドが以下になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// as なしの場合、以下のメソッドだが（デフォルト）
user.getProject();

// as ありの場合、以下のメソッド(指定した名前)になる
user.getPrj()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-4-foreignkey-外部キーの名前を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.4. foreignKey: 外部キーの名前を任意に変更する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;foreignKey&lt;/strong&gt; オプションに任意の名前を与えることで、Sequelize の外部キーの命名規則を完全無視できる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */})
  , Project = sequelize.define(&#39;Project&#39;, {/* ... */})

User.belongsTo(Project, {foreignKey: &#39;fk_project&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fk_project (ProjectId ではなく foreignKey で指定した名前になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ここで注意する必要があるのは&lt;/strong&gt; as で指定した場合とは異なり、インスタンスのもつメソッドは変わらないということ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// foreginKey あり・なしに関わらず、以下のメソッド（デフォルト）
user.getProject();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-5-targetkey-外部キーをプライマリキーから任意のカラムに変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.5. targetKey: 外部キーをプライマリキーから任意のカラムに変更する&lt;/h3&gt;

&lt;p&gt;以下にある通り、デフォルトの外部キーは target (または source)のプライマリキーになります。belongsTo としか書いてないけど、それ以外も基本同じ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default the target key for a belongsTo relation will be the target primary key. To override this behavior, use the targetKey option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例えば、Project の name カラムを外部キーにする場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */});
var Project = sequelize.define(&#39;Project&#39;, {
    name: { type: DataTypes.STRING, unique: true}
});

User.belongsTo(models.Project, {foreignKey: &#39;fk_projectname&#39;, targetKey: &#39;name&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;fk_projectname&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インスタンスのもつメソッドは &lt;a href=&#34;#2-4-foreignkey-外部キーの名前を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.4. foreignKey: 外部キーの名前を任意に変更する&lt;/a&gt; と変わりなし&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequelize Part 1 - 導入してREPLで試してみる</title>
      <link>http://blog.syati.info/post/sequelize_getting_started/</link>
      <pubDate>Tue, 29 Dec 2015 12:38:07 JST</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_getting_started/</guid>
      <description>

&lt;p&gt;ちょっと前まで MEAN とか流行っていた気がするんですが、今はどうなんですかね？実際にちょっとしたWEBサービスで利用してみると、MongoDB が思った以上に厄介だった。トランザクションが無いのが、どうしても辛い。後々考えると面倒くさいことになるのは目に見えているのでヤメヤメ。ということで従来通り RDB を利用、そして、ORM は &lt;strong&gt;Sequelize&lt;/strong&gt; を利用したので、その辺をメモっていきたいと思う。&lt;/p&gt;

&lt;p&gt;以降で説明するコードは、&lt;a href=&#34;https://github.com/Syati/sequelize-sample/tree/master/01_repl&#34;&gt;01_repl&lt;/a&gt; にあります。&lt;/p&gt;

&lt;h2 id=&#34;環境:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;li&gt;Node 5.3.0&lt;/li&gt;
&lt;li&gt;MariaDB 10.1.9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;orm-導入に際して:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;ORM 導入に際して&lt;/h2&gt;

&lt;p&gt;Node で RDB を利用するために、ORM のライブラリを検討。意外とあるもんですね。
以下に github の star と fork 数をまとめる(2015/12/29 調べ)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lib&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Star&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Fork&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;waterline&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2541&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;359&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/tgriesser/bookshelf&#34;&gt;bookshelf&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2824&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;228&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/dresende/node-orm2&#34;&gt;node-orm2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1655&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;282&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/sequelize/sequelize&#34;&gt;sequelize&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5344&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1160&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;それぞれの Lib の差異はわかりませんが Star と Fork 数で判断して、&lt;strong&gt;Sequelize で決定&lt;/strong&gt;。ドキュメントも見やすかったのでいいかな。&lt;/p&gt;

&lt;h2 id=&#34;1-db-orm-orm-cli-のインストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1. DB・ORM・ORM-CLI のインストール&lt;/h2&gt;

&lt;h3 id=&#34;1-1-db-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.1. DB インストール&lt;/h3&gt;

&lt;p&gt;mysql, posgre がある場合は不要。今回は mariadb を利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update
$ brew install mariadb 

$ unset TMPDIR
$ mysql_install_db

## start mariadb
$ mysql.server start

## connect mariadb
$ mysql -uroot
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/mariadb/building-mariadb-on-mac-os-x-using-homebrew/&#34;&gt;Building MariaDB on Mac OS X Using Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-2-orm-sequelize-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.2. ORM (Sequelize) インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save sequelize
$ npm install --save mysql // For both mysql and mariadb dialects
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-orm-cli-sequelize-cli-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.3. ORM-CLI (Sequelize CLI) インストール&lt;/h3&gt;

&lt;p&gt;初期設定、モデル作成、マイグレーション など便利なので CLI をいれる。
コマンドラインをグローバルで利用したいので &lt;strong&gt;g&lt;/strong&gt; 付与する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g sequelize-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-各種設定:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2. 各種設定&lt;/h2&gt;

&lt;p&gt;現状の dir 構成は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sample_prj
├── node_modules
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-db-作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2.1. DB 作成&lt;/h3&gt;

&lt;p&gt;今回利用する DB を &lt;strong&gt;seq_dev&lt;/strong&gt; として、 mariadb に作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot
## mariadb に接続後、今回利用するデータベースを作成する
$ create database seq_dev character set utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-初期設定:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2.2. 初期設定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.3&lt;/strong&gt; でインストールした Sequelize CLI を用いて初期設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sequelize init #プロジェクトルートで実行。初期設定を作成する

# dir 構成は以下になる
sample_prj
├── config     # config.json に DB の初期設定が書き出される
├── migrations # cli で model:create した際、migration が自動作成される
├── models     # cli で model:create した際、model が自動作成される
├── node_modules
├── package.json
└── seeders    # cli で seed:create した際、seed が自動作成される

# 基本的に上記は .sequelizerc にてカスタマイズ可能
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;config/config.json&lt;/strong&gt; に初期設定があるが、先ほど作成したデータベース名と異なっているので変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// サンプル config.json
{
  &amp;quot;development: {
    &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;,
    &amp;quot;password&amp;quot;: null,
    &amp;quot;database&amp;quot;: &amp;quot;seq_dev&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;dialect&amp;quot;: &amp;quot;mysql&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-はじめてのモデル作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3. はじめてのモデル作成&lt;/h2&gt;

&lt;h3 id=&#34;3-1-model-の作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3.1. model の作成&lt;/h3&gt;

&lt;p&gt;models ディレクトリに model.js のように手動でモデルを作成しても良いのだが、CLI を利用してモデルを作成してあげると、マイグレーションも一緒に作成してくれるので、CLI を利用すると楽かもしれない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ただし、&lt;a href=&#34;http://stackoverflow.com/questions/27835801/how-to-auto-generate-migrations-with-sequelize-cli-from-sequelize-models&#34;&gt;作成したモデルを変更しても該当マイグレーションを更新する術がない&lt;/a&gt;&lt;/strong&gt;ので、手動で変更してあげる必要がある。django みたいに model から migration が作成できたら良いんだけどな・・。&lt;/p&gt;

&lt;p&gt;いざ、モデル作成。プロジェクトルートで以下のコマンドを叩く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sequelize model:create --name User --attributes firstName:string,lastName:string

## models が以下のようになる
models
├── index.js
└── user.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下テーブルを作成することになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id (自動作成)&lt;/li&gt;
&lt;li&gt;firstName&lt;/li&gt;
&lt;li&gt;lastName&lt;/li&gt;
&lt;li&gt;createdAt (自動作成)&lt;/li&gt;
&lt;li&gt;updatedAt (自動作成)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんで複数形？っていうのは、以下の通り。基本的に定義したモデルの複数形がテーブルになる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, sequelize will automatically transform all passed model names (first parameter of define) into plural.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;id の自動作成は、明確に記載されてないんだけど（どこかにあるのかな）、以下が効いてると思われる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sequelize will assume your table has a id primary key property by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;createdAt, updatedAt の自動作成は通り。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sequelize will then automatically add the attributes createdAt and updatedAt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;自動作成を無効にしたい！！カスタマイズしたいということは、もちろん可能。以下の参考へ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/legacy/#primary-keys&#34;&gt;PrimaryKey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/models-definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-models-の-index-js-について:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3.2. models の index.js について&lt;/h3&gt;

&lt;p&gt;models dir には index.js が sequelize init によって作成されるが、これは models ディレクトリにある全ファイルを読み込んで、モデルを構築してくれる。その際に、モデル間のリレーションも一緒に構築する。利用する際には、index.js を読み込んで、該当モデルを利用することになる。(ES6 利用)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 利用例
const models = require(&#39;./models&#39;);

const User = models.User;
User.findAll().then((users) =&amp;gt; console.log(users));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-試してみる:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4. 試してみる&lt;/h2&gt;

&lt;h3 id=&#34;4-1-エントリポイントの作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4.1. エントリポイントの作成&lt;/h3&gt;

&lt;p&gt;とりあえず色々試してみたいので、repl できるようにプロジェクトルートに &lt;strong&gt;repl.js&lt;/strong&gt; とでもしてエントリポイントを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// repl.js
const models = require(&#39;./models&#39;);

models.sequelize.sync({force:true}).then(() =&amp;gt; {
  console.log(&amp;quot;DEV DATA CREATED SUCCESSFULLY&amp;quot;);
});

module.exports = models;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記ですが、sync メソッドで、定義したモデルをDBに反映する。force:true オプションを与えることで、毎回 テーブルを Drop して Create してくれる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本番では migration を利用する&lt;/strong&gt;ことになると思いますが、開発環境や、とりあえず試めすくらいには 、スキームを変更するのが楽なので、force:true でも良い気がする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/sequelize/#sync&#34;&gt;sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-2-node-replで試す:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4.2. Node REPLで試す&lt;/h3&gt;

&lt;p&gt;REPL を起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下を打ち込んで試してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// repl 内
const models = require(&#39;./repl&#39;);
const User = models.User;

// ユーザ作成
User.create({
    firstName: &#39;Yamada&#39;, 
    lastName: &#39;Tarou&#39;
}).then((user) =&amp;gt; console.log(JSON.stringify(user)));
// 出力
// &amp;gt; Executing (default): INSERT INTO `Users` (`id`,`firstName`,`lastName`,`updatedAt`,`createdAt`) VALUES (DEFAULT,&#39;Yamada&#39;,&#39;Tarou&#39;,&#39;2015-12-30 03:10:38&#39;,&#39;2015-12-30 03:10:38&#39;);
// {&amp;quot;id&amp;quot;:1,&amp;quot;firstName&amp;quot;:&amp;quot;Yamada&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Tarou&amp;quot;,&amp;quot;updatedAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;}

// ユーザ取得
User.findAll().then((users) =&amp;gt; console.log(JSON.stringify(users)));
// 出力
// &amp;gt; Executing (default): SELECT `id`, `firstName`, `lastName`, `createdAt`, `updatedAt` FROM `Users` AS `User`;
// [{&amp;quot;id&amp;quot;:1,&amp;quot;firstName&amp;quot;:&amp;quot;Yamada&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Tarou&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;,&amp;quot;updatedAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;}]

// ※出力を見やすくするため JSON.stringify しています
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その他メソッド

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/model/&#34;&gt;http://docs.sequelizejs.com/en/latest/api/model/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript でユニットテストする。カバレッジもねっ!!</title>
      <link>http://blog.syati.info/post/typescript_coverage/</link>
      <pubDate>Sat, 31 Oct 2015 14:00:39 JST</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_coverage/</guid>
      <description>

&lt;p&gt;AltJs ってトランスパイルした後、テストを実行させる必要があるから・・、面倒くさいんだよね。なんか、あまり情報もないし、これだから AltJs は・・・と思うわけですが、やってみると案外大したことないもんです。&lt;/p&gt;

&lt;p&gt;今回は、TypeScript のコードのユニットテスト、カバレッジを記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&#34;&gt;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-0-事前準備:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 0: 事前準備&lt;/h2&gt;

&lt;h3 id=&#34;流れ:134ba188964091106b5909c7aef27c8d&#34;&gt;流れ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ts でコードを書く&lt;/li&gt;
&lt;li&gt;トランスパイルする（js と map を出力）&lt;/li&gt;
&lt;li&gt;js をテストする&lt;/li&gt;
&lt;li&gt;map を利用して&lt;strong&gt;ts カバレッジ&lt;/strong&gt;を測る&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ライブラリ:134ba188964091106b5909c7aef27c8d&#34;&gt;ライブラリ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;npm install -g mocha istanbul remap-istanbul&lt;/strong&gt; でそれぞれコマンドが利用できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test framework

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/mocha&#34;&gt;mocha&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;テストフレームワークですね。他にも karma, jasmine など、たくさんありますがシンプルなので、とっつきやすかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coverage

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/istanbul&#34;&gt;istanbul&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;カバレッジを測定してくれる。カバレッジがあると、ユニットテストのモチベーションが上がりますよね！！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/remap-istanbul&#34;&gt;remap-istanbul&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;istanbul だけでは、トランスパイル後（js）のカバレッジしか測れないので、map を利用して、ts のカバレッジを測る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-とりあえずテストを書く:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 1: とりあえずテストを書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&#34;&gt;プロジェクト&lt;/a&gt; を確認しておく。全体が理解しやすくなると思う。&lt;/p&gt;

&lt;p&gt;テストは、単にコンストラクタで与えられた値を保持しているかどうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// app/src/main.ts
export default class TestTarget {
    constructor(public name){
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// app/test/main.test.ts
import assert from &#39;power-assert&#39;;
import TestTarget from &#39;../src/main&#39;;

describe(&amp;quot;TestTarget&amp;quot;, () =&amp;gt; {
    it(&amp;quot;should have a name&amp;quot;, () =&amp;gt; {
        let testTarget = new TestTarget(&amp;quot;test&amp;quot;);
        assert.equal(testTarget.name, &amp;quot;test&amp;quot;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すごいシンプルですね。&lt;/p&gt;

&lt;h2 id=&#34;step-2-トランスパイルする:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 2: トランスパイルする&lt;/h2&gt;

&lt;p&gt;tsc コマンドを叩く前に設定ファイルを書いときましょう。以下の tsconfig.json になります。
とくに変わった点はないですね。重要なポイントとしては、&lt;strong&gt;&amp;ldquo;sourceMap&amp;rdquo;: true&lt;/strong&gt;です。
後々、ts のカバレッジを測るために必要になってきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.6.2&amp;quot;,
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,
    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,
    &amp;quot;sourceMap&amp;quot;: true
  },
  &amp;quot;exclude&amp;quot;: [
    &amp;quot;dist&amp;quot;,
    &amp;quot;node_modules&amp;quot;
  ],
  &amp;quot;files&amp;quot;: [
    &amp;quot;typings/tsd.d.ts&amp;quot;,
    &amp;quot;app/src/main.ts&amp;quot;,
    &amp;quot;app/test/main.test.ts&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトルートで tsc コマンドを叩きます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-テストする:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 3: テストする&lt;/h2&gt;

&lt;p&gt;Step 2 でトランスパイル済みなので、ts ファイル以外に js、map ファイルが存在すると思います。ディレクトリが汚れてあたふたするかもしれませんが、package.json に clean スクリプトを書くことで解決できるので、今は我慢。&lt;/p&gt;

&lt;p&gt;プロジェクトルートでテストコマンドを叩いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mocha app/test/*.test.js

  TestTarget

    ✓ should have a name


  1 passing (8ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功、終わりです。&lt;/p&gt;

&lt;p&gt;味気ないですね。&lt;/p&gt;

&lt;p&gt;ユニットテストのモチベーションをあげるためにも、やっぱりカバレッジですよ！！&lt;/p&gt;

&lt;h2 id=&#34;step-4-カバレッジを測る:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 4: カバレッジを測る&lt;/h2&gt;

&lt;p&gt;とくに必要なことはありません。Step 0 で説明したとおり &lt;strong&gt;istanbul&lt;/strong&gt; を利用するだけ。
すこし異なっているのは、 mocha が _mocha を利用するということです。理由は、以下のとおり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gotwarlost/istanbul/issues/44#issuecomment-16093330&#34;&gt;https://github.com/gotwarlost/istanbul/issues/44#issuecomment-16093330&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istanbul cover _mocha -- ./app/test/*.test.js

  TestTarget

    ✓ should have a name


  1 passing (5ms)


=============================== Coverage summary ===============================
Statements   : 100% ( 6/6 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 2/2 )
Lines        : 100% ( 6/6 )
================================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力に、&lt;strong&gt;coverage summary&lt;/strong&gt; が増えましたね。また、プロジェクトルートに &lt;strong&gt;coverage&lt;/strong&gt; ディレクトリが出力されているので、中の index.html を見ましょう。通過したコード、100% の数字にやる気が出てきますね。ただし、これはトランスパイル後の js のカバレッジなので、あと一手間かけてあげましょう。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;coverage_js.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;トランスパイル後のカバレッジ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-5-ソースマップから-ts-のカバレッジを測る:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 5: ソースマップから ts のカバレッジを測る&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;coverage&lt;/strong&gt; ディレクトリにて以下のコマンドたたいてあげるだけです。ts のカバレッジが html-repot ディレクトリに出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ remap-istanbul -i coverage.json -o html-report -t html
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;coverage_ts.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ts のカバレッジ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;ts のカバレッジが測れました。ただ、一連のコマンドを毎回叩くのは疲れるので、&lt;strong&gt;package.json&lt;/strong&gt; を用いて楽にしましょう。&lt;/p&gt;

&lt;p&gt;＊図が Step 4 とデザインが違うのは、remap-istanbul で利用している istanbul のバージョンが古いからだと思われる&lt;/p&gt;

&lt;h2 id=&#34;step-6-package-json-で楽する:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 6: package.json で楽する&lt;/h2&gt;

&lt;p&gt;一連のコマンドを &lt;strong&gt;package.json&lt;/strong&gt; に書いておきましょう。以下サンプル。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  ...

  &amp;quot;scripts&amp;quot;: {
    &amp;quot;postinstall&amp;quot;: &amp;quot;tsd install&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;find -E . -regex &#39;./app/.+\\.(js|map)$&#39; -type f | xargs rm &amp;amp;&amp;amp; rm -rf ./build&amp;quot;,
    &amp;quot;pretest&amp;quot;: &amp;quot;tsc&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;istanbul cover _mocha -- ./app/test/*.test.js&amp;quot;,
    &amp;quot;posttest&amp;quot;: &amp;quot;cd coverage &amp;amp;&amp;amp; remap-istanbul -i coverage.json -o html-report -t html&amp;quot;
    },
    
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大事なのは、 &lt;strong&gt;1. pretest、2. test、3. posttest&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm test&lt;/strong&gt; を実行することで &lt;strong&gt;1. 2. 3.&lt;/strong&gt;の順番で実行してくれます。今回の step2 - step5 をコマンド１つで済せられるということですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 次回からはこれだけでよい
$ npm test 

# js とか map 削除したいとおもったら
$ npm clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他:134ba188964091106b5909c7aef27c8d&#34;&gt;その他&lt;/h2&gt;

&lt;h3 id=&#34;istanbul-yml-でカバレッジレポートのディレクトリ指定する:134ba188964091106b5909c7aef27c8d&#34;&gt;.istanbul.yml でカバレッジレポートのディレクトリ指定する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;.istanbul.yml&lt;/strong&gt; に以下のように書いてあげることで、レポートの出力先を変えることが出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#.istanbul.yml
reporting:
    dir: ./docs/coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もっとカスタマイズしたい場合は、以下のコマンドからデフォルト設定など説明をみるといいかも。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istanbul help config
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript でフロントエンドを実装する</title>
      <link>http://blog.syati.info/post/typescript_webpack/</link>
      <pubDate>Sat, 10 Oct 2015 18:37:23 JST</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_webpack/</guid>
      <description>

&lt;p&gt;型が恋しいのです。仮引数見た時に、何が入るか簡単に知りたいのです。実引数の型が違った時には教えてほしいのです。そんなこんなで、TypeScript がお気に入りです。&lt;/p&gt;

&lt;p&gt;今回は、どうやってフロントエンドで TypeScript を利用するか記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-0-事前準備:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 0: 事前準備&lt;/h2&gt;

&lt;p&gt;以下のコマンドを使用するのでグローバルにインストールしておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Package managers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;: プロジェクトで利用するライブラリをインストールするために利用する。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://definitelytyped.org/tsd/&#34;&gt;tsd&lt;/a&gt;: プロジェクトで利用するライブラリの定義ファイルをインストールするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install tsd -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;typescript compiler&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;tsc&lt;/a&gt;: ts ファイルをコンパイルするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install typescript -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://webpack.github.io/docs/&#34;&gt;webpack&lt;/a&gt;: フロントエンドでモジュールをロードするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-いろいろ初期化-プロジェクトの作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 1: いろいろ初期化(プロジェクトの作成)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir app
$ tsd init  # いろいろ尋ねてくるけど enter 連打
$ npm init

$ tree ./ -L 1
./
├── app             # ここに html, ts などを入れる
├── package.json    # npm init で作成される（ライブラリ管理）
├── tsd.json        # tsd init で作成される（ライブラリの定義を管理）
└── typings         # tsd init で作成される（ライブラリの定義のソースコードが入る）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-ライブラリのインストール:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 2: ライブラリのインストール&lt;/h2&gt;

&lt;p&gt;npm と tsd を利用して、ライブラリ、ライブラリの定義をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
## プロジェクトで利用するライブラリのインストール
$ npm install typescript --save
$ npm install jquery --save
## TypeScript で利用するにはもちろん定義が必要なので、tsd で jquery をインストール
$ tsd install jquery --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-app-を作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 3: app を作成&lt;/h2&gt;

&lt;p&gt;app の下に app.ts として以下を作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as $ from &#39;jquery&#39;;

$(() =&amp;gt; {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app の下に index.html として以下を作成。 後に app.ts から bundle.js を作成するため、この段階で script を埋め込んでおく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;/&amp;gt;
        &amp;lt;script src=&amp;quot;build/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4-コンパイルする:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 4: コンパイルする&lt;/h2&gt;

&lt;p&gt;step 3 で作成した app.ts を js に変換するために tsc の設定を作成する。
&lt;strong&gt;step 1 ./&lt;/strong&gt; で tsconfig.json として以下のように作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;sourceMap&amp;quot;: false,     # ソースマップ作成の有無
    &amp;quot;target&amp;quot;: &amp;quot;ES5&amp;quot;,        # target の設定
    &amp;quot;outDir&amp;quot;: &amp;quot;app/build&amp;quot;,  # 出力先
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;    # module のスタイル
  },
  &amp;quot;files&amp;quot;: [                # ファイル
    &amp;quot;typings/tsd.d.ts&amp;quot;,
    &amp;quot;app/app.ts&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずコンパイルしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に app.js が作成されているので覗いてみる。&lt;strong&gt;require&lt;/strong&gt; の記述があるが、もちろんフロントではつかえない。そこで、フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; を用いる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var $ = require(&#39;jquery&#39;);
$(function () {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでのプロジェクトディレクトリは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./
├── package.json
├── tsconfig.json
├── tsd.json
├── app
│   ├── index.html
│   ├── app.ts
│   └── build
│       └── app.js
├── node_modules
│   └── jquery
│   └── typescript
└── typings
    ├── jquery
    │   └── jquery.d.ts
    └── tsd.d.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-webpack-導入:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 5: webpack 導入&lt;/h2&gt;

&lt;p&gt;フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; をインストールして、ついでに、TypeScript のファイルを処理できるように loader をいれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# webpack のインストールは、step 0 でインストールしたものとする
# typescript ファイルを処理できるように以下の webpack 用の loader をプロジェクトのライブラリに追加する
npm install ts-loader --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;webpack コマンドをたたけば require などの依存関係を解決してくれるのだが、いろいろとオプションを指定する必要がある。毎回コマンドの度に、それらを打ち込むのは面倒くさいので、設定ファイルに書いておいてあげる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 1 ./&lt;/strong&gt; で webpack.config.js として以下のように webpack の設定を作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  entry: &#39;./app/app.ts&#39;,
  output: {
    filename: &#39;./app/build/bundle.js&#39;
  },
  resolve: {
    // Add `.ts` and `.tsx` as a resolvable extension.
    extensions: [&#39;&#39;, &#39;.webpack.js&#39;, &#39;.web.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.js&#39;]
  },
  module: {
    loaders: [
      // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`
      { test: /\.tsx?$/, loader: &#39;ts-loader&#39; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで簡単に webpack とコマンドをたたくだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
$ webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に bundle.js が作成されているので覗いてみる。require が解決され、単一の js ファイルとして出力されていることがわかる。&lt;/p&gt;

&lt;p&gt;これで index.html をブラウザーで覗いてみると、&lt;strong&gt;hello&lt;/strong&gt; の文字が出力されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;ソースはこちらから&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jbrantly.com/typescript-and-webpack/&#34;&gt;TypeScript and webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>package.json を一括更新</title>
      <link>http://blog.syati.info/post/upgrade_package_json/</link>
      <pubDate>Wed, 07 Oct 2015 22:00:32 JST</pubDate>
      
      <guid>http://blog.syati.info/post/upgrade_package_json/</guid>
      <description>

&lt;p&gt;package.json の dependencies を、どうやって一括で更新するのかなと思ってたら！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで簡単に更新できる！！&lt;/p&gt;

&lt;h2 id=&#34;更新する:fa2289da0f3da34235594a1a0c6afa63&#34;&gt;更新する&lt;/h2&gt;

&lt;p&gt;以下の通り。すごく簡単だね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g npm-check-updates
# package.json のあるフォルダで
$ ncu -u
 body-parser    ~1.8.1  →  ~1.14.1 
 cookie-parser  ~1.3.3  →   ~1.4.0 
 debug          ~2.0.0  →   ~2.2.0 
 jade           ~1.6.0  →  ~1.11.0 
 mongoose       ~4.0.8  →  ~4.1.10 
 morgan         ~1.3.0  →   ~1.6.1 
 serve-favicon  ~2.1.3  →   ~2.3.0
 
Upgraded /your/path/package.json
 
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一括更新完了！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LiveReload with Firefox</title>
      <link>http://blog.syati.info/post/livereload_firefox/</link>
      <pubDate>Fri, 25 Sep 2015 08:49:12 JST</pubDate>
      
      <guid>http://blog.syati.info/post/livereload_firefox/</guid>
      <description>

&lt;p&gt;Firefox LiveReload + grunt-contrib-watch LiveReload で以下の warning メッセージがでて、LiveReload うごかないよ！！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are using an old incompatible version of the command-line tool.&lt;/p&gt;

&lt;p&gt;Please run following command &amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんでや・・と思いながら、よくよくアドオンの見たら書いてあった・・・。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension is deprecated. The latest version is available at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://help.livereload.com/kb/general-use/browser-extensions&#34;&gt;http://help.livereload.com/kb/general-use/browser-extensions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;warning:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Warning&lt;/h2&gt;


&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;livereload_warning.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;LiveReload Warning&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;extension-old:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Extension (old)&lt;/h2&gt;

&lt;p&gt;これではない。&lt;/p&gt;


&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;livereload_extension.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;LiveReload extension (old)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;extension-new:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Extension (new)&lt;/h2&gt;

&lt;p&gt;以下のURLから入れましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://help.livereload.com/kb/general-use/browser-extensions&#34;&gt;http://help.livereload.com/kb/general-use/browser-extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おしまい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 5 - Hugo に Google カスタム検索エンジンを導入</title>
      <link>http://blog.syati.info/post/hugo_search/</link>
      <pubDate>Mon, 21 Sep 2015 16:25:47 JST</pubDate>
      
      <guid>http://blog.syati.info/post/hugo_search/</guid>
      <description>

&lt;p&gt;記事が多くなってくると、やっぱり検索したくなるもんです。Hugo で検索を使うには、&lt;a href=&#34;https://gohugo.io/tools&#34;&gt;Tools&lt;/a&gt; に書いてある通り以下の方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自前でインデックスを作成して提供する方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blevesearch/hugoidx&#34;&gt;Hugoidx&lt;/a&gt;: Bleve を用いる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;: grunt と lunr.js を用いる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当ページでは、&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;  を用いて検索を実現していますが、お手軽さでいうと、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; ですね。なので今回は、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; の導入方法を紹介。&lt;/p&gt;

&lt;h2 id=&#34;step-1-登録する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 1 登録する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; にアクセスして登録しましょう。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;step1.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの登録&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-2-作成する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 2 作成する&lt;/h2&gt;

&lt;p&gt;必要情報を入力しましょう。&lt;strong&gt;検索するサイト&lt;/strong&gt;を入力すると、&lt;strong&gt;検索エンジンの名前&lt;/strong&gt; も入力されるため枠で囲っていません。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;step2.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの作成&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-3-確認する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 3 確認する&lt;/h2&gt;

&lt;p&gt;作成された検索エンジンを確認しましょう。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;step3.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの確認&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-4-設定する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 4 設定する&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;対象&lt;/strong&gt; のリストメニューの &lt;strong&gt;デザイン&lt;/strong&gt; をえらんで、レイアウトやテーマなど色々設定しましょう。設定すると、&lt;strong&gt;プレビュー&lt;/strong&gt;で確認できます。最後に&lt;strong&gt;保存してコードを取得&lt;/strong&gt;します。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;step4.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの設定&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-5-取得する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 5 取得する&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;コード&lt;/strong&gt; をコピーしときましょう。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step5.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンのコードを取得&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;step-6-設置する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 6 設置する&lt;/h2&gt;

&lt;p&gt;コピーしたコードを layouts の任意の html に貼り付けましょう。完成すると以下のように検索が可能になります。&lt;/p&gt;

&lt;p&gt;&lt;script&gt;
  (function() {
    var cx = &#39;004743453564496319247:9t8ean_mgiw&#39;;
    var gcse = document.createElement(&#39;script&#39;);
    gcse.type = &#39;text/javascript&#39;;
    gcse.async = true;
    gcse.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) +
        &#39;//cse.google.com/cse.js?cx=&#39; + cx;
    var s = document.getElementsByTagName(&#39;script&#39;)[0];
    s.parentNode.insertBefore(gcse, s);
  })();
&lt;/script&gt;
&lt;gcse:search&gt;&lt;/gcse:search&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 3 - Docker で nginx を構築する</title>
      <link>http://blog.syati.info/post/docker_tutorial_nginx/</link>
      <pubDate>Sun, 20 Sep 2015 15:49:48 JST</pubDate>
      
      <guid>http://blog.syati.info/post/docker_tutorial_nginx/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/docker_machine/&#34;&gt;docker-machine コマンドの使用方法・流れ&lt;/a&gt; で、docker vm の作成までは出来るようになったので、今回 docker vm に nginx container を立ち上げたいと思う。ここからが環境構築の本番。はやく MEAN とか LAMP 環境を構築したい思うが、急がば回れです。&lt;/p&gt;

&lt;p&gt;以前、何度か &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で docker に入門しましたが、その後挫折。 入門して nginx を構築を出来たはいいが、 MEAN とか LAMP の開発環境を構築するのがすごく困難な感じがして。&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;docker コマンド&lt;/a&gt; たくさんあるし、複数 container のリンクとか、データの永続化とか、ググればググるほど手強いぞ docker ってなってた・・・。&lt;/p&gt;

&lt;p&gt;が、時が経過した今、楽になってますよ。情報も増えてるし、何より docker-compose （複数コンテナの構築）が便利だった。それでは nginx を構築!!&lt;/p&gt;

&lt;p&gt;ただし、以下を読むより動画 &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で学ぶほうが分かりやすい。&lt;/p&gt;

&lt;h2 id=&#34;step1-docker-vm-の作成-復習:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step1 docker vm の作成(復習)&lt;/h2&gt;

&lt;p&gt;とりあえず docker vm を作成・利用する。忘れた方は、こちらで&lt;a href=&#34;http://blog.syati.info/post/docker_machine/&#34;&gt;docker-machine コマンドの使用方法・流れ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine create --driver virtualbox mynginx
$ eval &amp;quot;$(docker-machine env mynginx)&amp;quot;
$ docker-machine ls
NAME            ACTIVE   DRIVER       STATE     URL                         SWARM
mynginx         *        virtualbox   Running   tcp://192.168.99.100:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで上記の vm にたいして docker コマンドを発行できので、叩いてみる。コンテナがないので何も表示されない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

# 参考）eval で vm を指定しなかった場合
$ docker ps
Get http:///var/run/docker.sock/v1.20/containers/json: dial unix /var/run/docker.sock: no such file or directory.
* Are you trying to connect to a TLS-enabled daemon without TLS?
* Is your docker daemon up and running?
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step1-5-簡単な全体イメージ:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step1.5 簡単な全体イメージ&lt;/h2&gt;

&lt;p&gt;以下で使用する用語の全体イメージは以下のような感じである。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; から &lt;strong&gt;Image&lt;/strong&gt; を作成、Image から &lt;strong&gt;Container&lt;/strong&gt; を立ち上げる&lt;/p&gt;

&lt;h2 id=&#34;step2-dockerfile-の作成:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step2 Dockerfile の作成&lt;/h2&gt;

&lt;p&gt;Dockerfile （ Image 作成の手順書）を作成する。dir 構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mynginx/
└── Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Docker file
FROM nginx:latest                        # イメージの指定
MAINTAINER mizuki-y&amp;lt;mizuki-y@syati.info&amp;gt; # 作成者の情報
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で手順書と書いたが、２行しかない手順書である。
ただ単に、Image に&lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;Official Repository nginx&lt;/a&gt;を利用しますと記述しただけ。
&lt;strong&gt;RUN&lt;/strong&gt;、&lt;strong&gt;CMD&lt;/strong&gt; とか他にも命令はあるが、今回はシンプルに。いますぐ知りたい！！という場合は、以下を参考に。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1407/08/news031.html&#34;&gt;Dockerfileとdocker buildコマンドでDockerイメージの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step3-image-の作成:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step3 Image の作成&lt;/h2&gt;

&lt;p&gt;Dockerfile から Image を 作成するため &lt;strong&gt;build&lt;/strong&gt; コマンドを実施する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build コマンドのヘルプ見てみる
$ docker build --help

Usage:  docker build [OPTIONS] PATH | URL | -

Build a new image from the source code at PATH
## 多いので省略して、今回利用するものだけ
  -t, --tag=                      Repository name (and optionally a tag) for the image

# いろいろありますが、とりあえず OPTIONS -t （名前付け）だけ覚えればいいでしょう。PATH には Dockerfile パスを。
$ docker build -t syati:nginx .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step4-image-の確認:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step4 Image の確認&lt;/h2&gt;

&lt;p&gt;作成した Image を確認するため &lt;strong&gt;images&lt;/strong&gt; コマンドを実施する。 Step2 で FROM しか指定していないので何も変わっていない（SIZE 同じ）が Dockerfile から Image を作成できている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
syati               nginx               a232c3216f20        9 seconds ago       132.9 MB
nginx               latest              0b354d33906d        10 days ago         132.9 MB　   # ベースとなったイメージ

# 参考） -t オプションつけないと &amp;lt;none&amp;gt; になる
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              dd06038a778d        10 minutes ago      132.9 MB
nginx               latest              0b354d33906d        10 days ago         132.9 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step5-container-を立ち上げる:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step5 Container を立ち上げる&lt;/h2&gt;

&lt;p&gt;作成した Image から Container を立ち上げるために &lt;strong&gt;run&lt;/strong&gt; コマンドを実施する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run コマンドのヘルプ見てみる
$ docker run --help

Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container
## 多いので省略して、今回利用するものだけ
  -d, --detach=false              Run container in background and print container ID
  -i, --interactive=false         Keep STDIN open even if not attached
  -P, --publish-all=false         Publish all exposed ports to random ports
  -p, --publish=[]                Publish a container&#39;s port(s) to the host

# コンテナを立ち上げる
$ docker run -P -d syati:nginx
5c70e0b84c91dc04d56fab9b9967765716008bfcb4d1fe102ba34d305994541b
## -P は コンテナで開いているポートと docker vm のポートをランダムにリンクする(以下の PORTS を見るとわかる）
## -d は コンテナをバックグラウンドで実行する(バックグラウンドで実行しないと次のコマンド打てなくなるから大事)

# ps コマンドで 動作を確認する
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                           NAMES
5c70e0b84c91        syati:nginx       &amp;quot;nginx -g &#39;daemon off&amp;quot;   46 seconds ago      Up 45 seconds       0.0.0.0:32771-&amp;gt;80/tcp, 0.0.0.0:32770-&amp;gt;443/tcp   trusting_lumiere


# 参考) -P でランダムなポートでリンクされても困っちゃうという場合は、以下のとおり -p を使って指定してあげる
$ docker run -p 8000:80 -d syati:nginx
2ac58799de9cfdceb02abf2b6050761801641b93c820097048cb46a9c0be3e6a

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                           NAMES
2ac58799de9c        syati:nginx       &amp;quot;nginx -g &#39;daemon off&amp;quot;   3 seconds ago       Up 3 seconds        443/tcp, 0.0.0.0:8000-&amp;gt;80/tcp   backstabbing_einstein
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile のことを少しでも知っていたら、以下の点を疑問に思うかもしれない。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dockerfile に CMD を記述していないのに、 COMMAND に nginx -g って・・。&lt;/li&gt;
&lt;li&gt;Dockerfile に EXPOSE を記述していないのに、 PORTSに 80 443 って・・。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これは利用イメージが &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;Official Repository nginx&lt;/a&gt; この &lt;a href=&#34;https://github.com/nginxinc/docker-nginx/blob/7f3ef0927ec619d20181e677c97f991df0d7d446/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; を利用して作成されているためである。&lt;/p&gt;

&lt;h2 id=&#34;step6-nginx-のデフォルトページを見る:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step6 nginx のデフォルトページを見る&lt;/h2&gt;

&lt;p&gt;Step1 で docker vm の ip を確認してポートを付与してあげる。 -p オプションでポートをした場合で考えると以下にアクセスすれば &lt;strong&gt;Welcome to nginx!&lt;/strong&gt; が見れるはず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://192.168.99.100:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;その他&lt;/h2&gt;

&lt;h3 id=&#34;container-の中身を確認する:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;container の中身を確認する&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -t -i syati:nginx /bin/bash

# -t -i オプションは以下の通り
$ docker run --help
Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container
  -i, --interactive=false         Keep STDIN open even if not attached
  -t, --tty=false                 Allocate a pseudo-TTY
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 2 - docker-machine コマンドの使用方法・流れ</title>
      <link>http://blog.syati.info/post/docker_machine/</link>
      <pubDate>Wed, 09 Sep 2015 23:00:19 JST</pubDate>
      
      <guid>http://blog.syati.info/post/docker_machine/</guid>
      <description>

&lt;p&gt;Docker すごい。 何がすごいって環境構築が楽すぎる。以前は、Vagrant と Chef でゴリゴリ書いてアプリケーションが動くように頑張ってましたが、そんな事しなくても大方用意されてる。あとはその組み合わせ環境を構築するだけ。懸念点であった Vagrant 、Chef のような provision が、遅いということは今のところ無い。最初にイメージを DL してコンテナ化するので、若干の時間はかかるものの、それでも早い。 具体的な環境構築については、後日記そうと思う。&lt;/p&gt;

&lt;p&gt;今回は &lt;strong&gt;docker-machine コマンド&lt;/strong&gt;（コンテナを動かす vm を管理するコマンド）の使用方法、流れを記す。&lt;/p&gt;

&lt;h2 id=&#34;前提:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;li&gt;Docker Toolbox

&lt;ul&gt;
&lt;li&gt;Docker version 1.8.1, build d12ea79&lt;/li&gt;
&lt;li&gt;docker-machine version 0.4.1 (e2c88d6)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Virtual Box 5.0.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker-machine-コマンド-流れ:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;docker-machine コマンド、流れ&lt;/h2&gt;

&lt;p&gt;以下のレイヤーと対応するコマンドを覚えておくと、スムーズかもしれない。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;レイヤー&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;対応コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker Container&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docker&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker VM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docker-machine&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;OSX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;step-1-docker-vm-を確認する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 1 docker vm を確認する&lt;/h3&gt;

&lt;p&gt;作成した docker vm を確認する。普段の &lt;strong&gt;ls&lt;/strong&gt; と同じ感じで使う頻度が高い。はじめは何もないので空である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-docker-vm-を作成する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 2 docker vm を作成する&lt;/h3&gt;

&lt;p&gt;docker vm を作成する。 以下のコマンドは、オプション driver で virtualbox を指定して、 vm 名を sample にしている。色々オプションがあるので、もっと詳しくという方は、&lt;a href=&#34;https://docs.docker.com/machine/reference/create/&#34;&gt;create&lt;/a&gt; を参考にしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine create --driver virtualbox sample

Creating VirtualBox VM...
Creating SSH key...
Starting VirtualBox VM...
Starting VM...
To see how to connect Docker to this machine, run: docker-machine env sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 1 の通り、作成した docker vm を確認してみる。vm が作成されているとともに、STATE を見ることで動作していること、URL を見ることで IP が割り振られていることが確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
sample             virtualbox   Running   tcp://192.168.99.103:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-docker-vm-を利用する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 3 docker vm を利用する&lt;/h3&gt;

&lt;p&gt;Step 2 まででは、対象の docker vm にコンテナを操作するコマンド(docker ps など)を実行できない。SSH で対象 vm に入れば可能だが、そんな面倒くさいことは毎回したくない。
そこで、以下のように env -&amp;gt; eval コマンドを実行して、利用する docker vm の環境変数を設定する。設定した docker vm の ACTIVE に * が記される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine env sample

export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.103:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/mizuki-y/.docker/machine/machines/sample&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;sample&amp;quot;
# Run this command to configure your shell:
# eval &amp;quot;$(docker-machine env sample)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval &amp;quot;$(docker-machine env sample)&amp;quot;
$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
sample    *        virtualbox   Running   tcp://192.168.99.103:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで今後利用する docker コマンドは docker vm である sample に発行される。&lt;/p&gt;

&lt;h2 id=&#34;その他:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;その他&lt;/h2&gt;

&lt;h3 id=&#34;docker-vm-の中身を確認する-ssh-で入る:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;docker vm の中身を確認する ssh で入る&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ssh sample

                        ##         .
                  ## ## ##        ==
               ## ## ## ## ##    ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
           \______ o           __/
             \    \         __/
              \____\_______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| &#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &amp;lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
Boot2Docker version 1.8.1, build master : 7f12e95 - Thu Aug 13 03:24:56 UTC 2015
Docker version 1.8.1, build d12ea79
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 1 - Mac に Docker をインストールする</title>
      <link>http://blog.syati.info/post/osx_docker_setup/</link>
      <pubDate>Thu, 03 Sep 2015 16:00:00 JST</pubDate>
      
      <guid>http://blog.syati.info/post/osx_docker_setup/</guid>
      <description>

&lt;p&gt;巷で Docker と騒がれて随分経ったでしょうか。私の Mac が新しくなったのを気に Docker に入門したいと思います。何か新しい開発の度にゴミが入るのはちょっと・・・、とも思いますしね。&lt;/p&gt;

&lt;p&gt;昔、Vagrant と Chef でローカル開発環境を構築していたこともありましたが provison が遅く、何だかなぁ〜と思っているうちに遠ざかっていました。Docker はコンテナ型で、vagrant より軽いのかな。&lt;/p&gt;

&lt;h2 id=&#34;前提:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-install-virtualbox:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 1 Install VirtualBox&lt;/h2&gt;

&lt;p&gt;VirtualBox5.0.2 だと Step 3 で動かなくなるので、&lt;a href=&#34;https://www.virtualbox.org/wiki/Testbuilds&#34;&gt;テストビルド&lt;/a&gt;から入れる。5.0.2 だった場合、 &lt;a href=&#34;#error-1:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;エラー1&lt;/a&gt;が出る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tukiyo3/items/c912fe9e403706964995&#34;&gt;Docker Toolbox付属のVirtualBox5.0.2では動かないので5.0.3を手動で入れること&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-2-install-docker-toolbox:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 2 Install Docker Toolbox&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask install dockertoolbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;(http://blog.syati.info/post/brew_cask/&#34;&gt;cask&lt;/a&gt; って思う方は、公式から &lt;a href=&#34;https://www.docker.com/toolbox&#34;&gt;Docker Toolbox&lt;/a&gt; をインストールしましょう。詳しい説明は、&lt;a href=&#34;https://docs.docker.com/mac/step_one/&#34;&gt;Install Docker Mac OS X&lt;/a&gt; 。インストールされる場所は以下のとおり、/usr/local/bin なので、path が通っていればコマンドが通るはずです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, the standard Docker Toolbox installation:
   installs binaries for the Docker tools in /usr/local/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コマンド例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker --version
Docker version 1.8.1, build d12ea79
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-とりあえず起動:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 3 とりあえず起動&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.com/mac/step_one/#step-3-verify-your-installation&#34;&gt;Installation&lt;/a&gt; に書いてあるとおり、以下のコマンドで、とりあえず起動、コマンドを実行してみる。&lt;a href=&#34;#error:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;エラー&lt;/a&gt;が無いことをもって、インストール・起動ができたことの確認を終了する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash &#39;/Applications/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh&#39;
$ docker run hello-world

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
  https://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;error:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Error&lt;/h2&gt;

&lt;h3 id=&#34;error-1:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;VirtualBox 5.0.2 時で start.sh を叩いた場合&lt;/h3&gt;

&lt;p&gt;以下のとおり、vm が立ち上がってくれない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.

Setting environment variables for machine default...


                        ##         .
                  ## ## ##        ==
               ## ## ## ## ##    ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
           \______ o           __/
             \    \         __/
              \____\_______/


host is not running
docker is configured to use the default machine with IP
For help getting started, check out the docs at https://docs.docker.com

default is not running. Please start this with docker-machine start default

$ docker-machine start default
exit status 1
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;error-2:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;VirtualBox 5.0.3 にした後、以前作成した vm のエラー&lt;/h3&gt;

&lt;p&gt;設定が取れないので、以前作成した vm は削除して、あらためて start.sh を叩きましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine env default
open /Users/mizuki-y/.docker/machine/machines/default/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で Dockerfile を編集する</title>
      <link>http://blog.syati.info/post/emacs_dockerfilemode/</link>
      <pubDate>Wed, 02 Sep 2015 17:58:56 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacs_dockerfilemode/</guid>
      <description>

&lt;p&gt;Docker に入門して、Dockerfile を書くことになったので、とりあえず dockerfile-mode 。&lt;/p&gt;

&lt;h2 id=&#34;install:2ed0ba6269ab29d148cbcf4c83fce2a2&#34;&gt;Install&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-x package-list-package で以下をインストールする&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dockerfile-mode&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(autoload &#39;dockerfile-mode &amp;quot;dockerfile-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Dockerfile\\&#39;&amp;quot; . dockerfile-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>brew cask が便利</title>
      <link>http://blog.syati.info/post/brew_cask/</link>
      <pubDate>Mon, 31 Aug 2015 18:44:21 JST</pubDate>
      
      <guid>http://blog.syati.info/post/brew_cask/</guid>
      <description>

&lt;p&gt;Web ページや App Store から App をダブルクリックしてインストールは面倒くさいので &lt;strong&gt;cask&lt;/strong&gt; をいれて解決する。&lt;/p&gt;

&lt;h2 id=&#34;インストールとコマンド:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;インストールとコマンド&lt;/h2&gt;

&lt;h3 id=&#34;インストール:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;cask&lt;/strong&gt; コマンドを使えるようにするために以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install caskroom/cask/brew-cask
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コマンド:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;コマンド&lt;/h3&gt;

&lt;p&gt;検索&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask search chrome

==&amp;gt; Partial matches
chrome-devtools                    google-chrome                      google-chrome-dev
chrome-remote-desktop-host         google-chrome-beta
chromecast                         google-chrome-canary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask install google-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アンインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask uninstall google-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;cask でインストールしたアプリは以下にインストールされ、ホームフォルダ(~/)の Applications からアプリへのシンボリックリンクが作成される。ルート(/)にインストールが必要なものはパスワードが求められる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/homebrew-cask/Caskroom/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下、~/Applications の例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/Applications
├── Alfred 2.app -&amp;gt; /opt/homebrew-cask/Caskroom/alfred/2.7.2_400/Alfred 2.app
├── Alfred Preferences.app -&amp;gt; /opt/homebrew-cask/Caskroom/alfred/2.7.2_400/Alfred 2.app/Contents/Preferences/Alfred Preferences.app
├── Chrome Apps.localized
├── Emacs.app -&amp;gt; /opt/homebrew-cask/Caskroom/emacs/24.5-1/Emacs.app
├── Firefox.app -&amp;gt; /opt/homebrew-cask/Caskroom/firefox/40.0.3/Firefox.app
├── FirefoxDeveloperEdition.app -&amp;gt; /opt/homebrew-cask/Caskroom/firefoxdeveloperedition-ja/latest/FirefoxDeveloperEdition.app
├── Google Chrome.app -&amp;gt; /opt/homebrew-cask/Caskroom/google-chrome/latest/Google Chrome.app
├── ShiftIt.app -&amp;gt; /opt/homebrew-cask/Caskroom/shiftit/1.6.3/ShiftIt.app
└── Visual Studio Code.app -&amp;gt; /opt/homebrew-cask/Caskroom/visual-studio-code/0.7.0/Visual Studio Code.app
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://caskroom.io/&#34;&gt;Homebrew Cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で Javascript なら js2-mode, tern-mode</title>
      <link>http://blog.syati.info/post/emacsJavascript2/</link>
      <pubDate>Mon, 31 Aug 2015 13:38:35 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacsJavascript2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/emacsJavascript/&#34;&gt;Emacs で JavaScript の開発環境を整える&lt;/a&gt; で、
Emacs と Javascript の開発環境を記しましたが、さらに改善できたので、メモメモ。&lt;/p&gt;

&lt;p&gt;ドットで jquery も underscore も browser もしてくれる。 angular も!!&lt;/p&gt;

&lt;h2 id=&#34;step-1-tern-のインストール-設定:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 1 tern のインストール・設定&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;npm で tern をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g tern
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.tern-config を以下のような感じで作成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;,
    &amp;quot;ecma5&amp;quot;,
    &amp;quot;underscore&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
    &amp;quot;angular&amp;quot;: {},
    &amp;quot;Node&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-2-emacs-の-package-をインストール:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 2 emacs の package をインストール&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;M-x package-list-package で以下の2点をインストールする（該当箇所で &lt;strong&gt;i&lt;/strong&gt; をタイプしてマークをつけて &lt;strong&gt;x&lt;/strong&gt; でインストールする）

&lt;ol&gt;
&lt;li&gt;tern&lt;/li&gt;
&lt;li&gt;js2-mode&lt;/li&gt;
&lt;li&gt;tern-auto-complete&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . js2-mode))


(add-hook &#39;js2-mode-hook
    (lambda ()
        (tern-mode t)))


(eval-after-load &#39;tern
    &#39;(progn
        (require &#39;tern-auto-complete)
        (tern-ac-setup)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3-試す:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 3 試す&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular
  .module(&#39;MyApp&#39;, [])
  .controller(&#39;SomeCtrl&#39;, function($scope, $http) {
    # ここで $scope. とでも入れてみる
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ternjs.net/doc/manual.html&#34;&gt;tern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/js2-mode/&#34;&gt;js2-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mac の Terminal で ALT KEY </title>
      <link>http://blog.syati.info/post/altkey_in_osx-terminal/</link>
      <pubDate>Sun, 30 Aug 2015 13:38:35 JST</pubDate>
      
      <guid>http://blog.syati.info/post/altkey_in_osx-terminal/</guid>
      <description>

&lt;p&gt;Mac の環境を新しく作ることになったので、以前の環境が出来るまでメモしていく。&lt;/p&gt;

&lt;p&gt;バックアップからの復元を使えば楽なのだが、ゴミが入るのは・・・。&lt;/p&gt;

&lt;p&gt;ただし、意外とハマる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ターミナルで alt key が使えないよ！！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;メタキーとして-option-キーを使用-にチェック:784ef5322b7ad8a18c627bd23e19b9ed&#34;&gt;&amp;ldquo;メタキーとして Option キーを使用&amp;rdquo; にチェック&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ターミナル -&amp;gt; 環境設定 -&amp;gt; プロファイルタブ を開く。&lt;/li&gt;
&lt;li&gt;以下の図のように &amp;ldquo;メタキーとして Option キーを使用&amp;rdquo; にチェックが入っていないと思うで、チェックする。&lt;/li&gt;
&lt;/ol&gt;


&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;settings.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ターミナル -&amp;gt; 環境設定 -&amp;gt; プロファイルタブ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>
