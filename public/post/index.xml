<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.syati.info/post/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Sat, 10 Oct 2015 18:37:23 JST</updated>
    
    <item>
      <title>TypeScript でフロントエンドを実装する</title>
      <link>http://blog.syati.info/post/typescript_webpack/</link>
      <pubDate>Sat, 10 Oct 2015 18:37:23 JST</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_webpack/</guid>
      <description>

&lt;p&gt;型が恋しいのです。仮引数見た時に、何が入るか簡単に知りたいのです。実引数の型が違った時には教えてほしいのです。そんなこんなで、TypeScript がお気に入りです。&lt;/p&gt;

&lt;p&gt;今回は、どうやってフロントエンドで TypeScript を利用するか記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-0-事前準備:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 0: 事前準備&lt;/h1&gt;

&lt;p&gt;以下のコマンドを使用するのでグローバルにインストールしておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Package managers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;: プロジェクトで利用するライブラリをインストールするために利用する。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://definitelytyped.org/tsd/&#34;&gt;tsd&lt;/a&gt;: プロジェクトで利用するライブラリの定義ファイルをインストールするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install tsd -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;typescript compiler&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;tsc&lt;/a&gt;: ts ファイルをコンパイルするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install typescript -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://webpack.github.io/docs/&#34;&gt;webpack&lt;/a&gt;: フロントエンドでモジュールをロードするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-1-いろいろ初期化-プロジェクトの作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 1: いろいろ初期化(プロジェクトの作成)&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir app
$ tsd init  # いろいろ尋ねてくるけど enter 連打
$ npm init

$ tree ./ -L 1
./
├── app             # ここに html, ts などを入れる
├── package.json    # npm init で作成される（ライブラリ管理）
├── tsd.json        # tsd init で作成される（ライブラリの定義を管理）
└── typings         # tsd init で作成される（ライブラリの定義のソースコードが入る）
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-2-ライブラリのインストール:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 2: ライブラリのインストール&lt;/h1&gt;

&lt;p&gt;npm と tsd を利用して、ライブラリ、ライブラリの定義をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
## プロジェクトで利用するライブラリのインストール
$ npm install typescript --save
$ npm install jquery --save
## TypeScript で利用するにはもちろん定義が必要なので、tsd で jquery をインストール
$ tsd install jquery --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-app-を作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 3: app を作成&lt;/h1&gt;

&lt;p&gt;app の下に app.ts として以下を作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as $ from &#39;jquery&#39;;

$(() =&amp;gt; {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app の下に index.html として以下を作成。 後に app.ts から bundle.js を作成するため、この段階で script を埋め込んでおく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;/&amp;gt;
        &amp;lt;script src=&amp;quot;build/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-コンパイルする:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 4: コンパイルする&lt;/h1&gt;

&lt;p&gt;step 3 で作成した app.ts を js に変換するために tsc の設定を作成する。
&lt;strong&gt;step 1 ./&lt;/strong&gt; で tsconfig.json として以下のように作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;sourceMap&amp;quot;: false,     # ソースマップ作成の有無
    &amp;quot;target&amp;quot;: &amp;quot;ES5&amp;quot;,        # target の設定
    &amp;quot;outDir&amp;quot;: &amp;quot;app/build&amp;quot;,  # 出力先
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;    # module のスタイル
  },
  &amp;quot;files&amp;quot;: [                # ファイル
    &amp;quot;typings/tsd.d.ts&amp;quot;,
    &amp;quot;app/app.ts&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずコンパイルしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に app.js が作成されているので覗いてみる。&lt;strong&gt;require&lt;/strong&gt; の記述があるが、もちろんフロントではつかえない。そこで、フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; を用いる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var $ = require(&#39;jquery&#39;);
$(function () {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでのプロジェクトディレクトリは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./
├── package.json
├── tsconfig.json
├── tsd.json
├── app
│   ├── index.html
│   ├── app.ts
│   └── build
│       └── app.js
├── node_modules
│   └── jquery
│   └── typescript
└── typings
    ├── jquery
    │   └── jquery.d.ts
    └── tsd.d.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-5-webpack-導入:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 5: webpack 導入&lt;/h1&gt;

&lt;p&gt;フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; をインストールして、ついでに、TypeScript のファイルを処理できるように loader をいれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# webpack のインストールは、step 0 でインストールしたものとする
# typescript ファイルを処理できるように以下の webpack 用の loader をプロジェクトのライブラリに追加する
npm install ts-loader --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;webpack コマンドをたたけば require などの依存関係を解決してくれるのだが、いろいろとオプションを指定する必要がある。毎回コマンドの度に、それらを打ち込むのは面倒くさいので、設定ファイルに書いておいてあげる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 1 ./&lt;/strong&gt; で webpack.config.js として以下のように webpack の設定を作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  entry: &#39;./app/app.ts&#39;,
  output: {
    filename: &#39;./app/build/bundle.js&#39;
  },
  resolve: {
    // Add `.ts` and `.tsx` as a resolvable extension.
    extensions: [&#39;&#39;, &#39;.webpack.js&#39;, &#39;.web.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.js&#39;]
  },
  module: {
    loaders: [
      // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`
      { test: /\.tsx?$/, loader: &#39;ts-loader&#39; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで簡単に webpack とコマンドをたたくだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
$ webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に bundle.js が作成されているので覗いてみる。require が解決され、単一の js ファイルとして出力されていることがわかる。&lt;/p&gt;

&lt;p&gt;これで index.html をブラウザーで覗いてみると、&lt;strong&gt;hello&lt;/strong&gt; の文字が出力されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;ソースはこちらから&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jbrantly.com/typescript-and-webpack/&#34;&gt;TypeScript and webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>package.json を一括更新</title>
      <link>http://blog.syati.info/post/upgrade_package_json/</link>
      <pubDate>Wed, 07 Oct 2015 22:00:32 JST</pubDate>
      
      <guid>http://blog.syati.info/post/upgrade_package_json/</guid>
      <description>

&lt;p&gt;package.json の dependencies を、どうやって一括で更新するのかなと思ってたら！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで簡単に更新できる！！&lt;/p&gt;

&lt;h1 id=&#34;更新する:fa2289da0f3da34235594a1a0c6afa63&#34;&gt;更新する&lt;/h1&gt;

&lt;p&gt;以下の通り。すごく簡単だね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g npm-check-updates
# package.json のあるフォルダで
$ ncu -u
 body-parser    ~1.8.1  →  ~1.14.1 
 cookie-parser  ~1.3.3  →   ~1.4.0 
 debug          ~2.0.0  →   ~2.2.0 
 jade           ~1.6.0  →  ~1.11.0 
 mongoose       ~4.0.8  →  ~4.1.10 
 morgan         ~1.3.0  →   ~1.6.1 
 serve-favicon  ~2.1.3  →   ~2.3.0
 
Upgraded /your/path/package.json
 
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一括更新完了！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LiveReload with Firefox</title>
      <link>http://blog.syati.info/post/livereload_firefox/</link>
      <pubDate>Fri, 25 Sep 2015 08:49:12 JST</pubDate>
      
      <guid>http://blog.syati.info/post/livereload_firefox/</guid>
      <description>

&lt;p&gt;Firefox LiveReload + grunt-contrib-watch LiveReload で以下の warning メッセージがでて、LiveReload うごかないよ！！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are using an old incompatible version of the command-line tool.&lt;/p&gt;

&lt;p&gt;Please run following command &amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんでや・・と思いながら、よくよくアドオンの見たら書いてあった・・・。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension is deprecated. The latest version is available at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://help.livereload.com/kb/general-use/browser-extensions&#34;&gt;http://help.livereload.com/kb/general-use/browser-extensions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;warning:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Warning&lt;/h1&gt;

&lt;p&gt;
&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;livereload_warning.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;LiveReload Warning&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;extension-old:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Extension (old)&lt;/h1&gt;

&lt;p&gt;これではない。&lt;/p&gt;

&lt;p&gt;
&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;livereload_extension.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;LiveReload extension (old)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;extension-new:a97b1ae451068793f1b3b1195bc54f9f&#34;&gt;Extension (new)&lt;/h1&gt;

&lt;p&gt;以下のURLから入れましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://help.livereload.com/kb/general-use/browser-extensions&#34;&gt;http://help.livereload.com/kb/general-use/browser-extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おしまい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 5 - Hugo に Google カスタム検索エンジンを導入</title>
      <link>http://blog.syati.info/post/hugo_search/</link>
      <pubDate>Mon, 21 Sep 2015 16:25:47 JST</pubDate>
      
      <guid>http://blog.syati.info/post/hugo_search/</guid>
      <description>

&lt;p&gt;記事が多くなってくると、やっぱり検索したくなるもんです。Hugo で検索を使うには、&lt;a href=&#34;https://gohugo.io/tools&#34;&gt;Tools&lt;/a&gt; に書いてある通り以下の方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自前でインデックスを作成して提供する方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blevesearch/hugoidx&#34;&gt;Hugoidx&lt;/a&gt;: Bleve を用いる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;: grunt と lunr.js を用いる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当ページでは、&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;  を用いて検索を実現していますが、お手軽さでいうと、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; ですね。なので今回は、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; の導入方法を紹介。&lt;/p&gt;

&lt;h1 id=&#34;step-1-登録する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 1 登録する&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; にアクセスして登録しましょう。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step1.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの登録&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;step-2-作成する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 2 作成する&lt;/h1&gt;

&lt;p&gt;必要情報を入力しましょう。&lt;strong&gt;検索するサイト&lt;/strong&gt;を入力すると、&lt;strong&gt;検索エンジンの名前&lt;/strong&gt; も入力されるため枠で囲っていません。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step2.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの作成&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;step-3-確認する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 3 確認する&lt;/h1&gt;

&lt;p&gt;作成された検索エンジンを確認しましょう。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step3.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの確認&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;step-4-設定する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 4 設定する&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;対象&lt;/strong&gt; のリストメニューの &lt;strong&gt;デザイン&lt;/strong&gt; をえらんで、レイアウトやテーマなど色々設定しましょう。設定すると、&lt;strong&gt;プレビュー&lt;/strong&gt;で確認できます。最後に&lt;strong&gt;保存してコードを取得&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step4.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンの設定&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;step-5-取得する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 5 取得する&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;コード&lt;/strong&gt; をコピーしときましょう。&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;step5.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カスタム検索エンジンのコードを取得&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;step-6-設置する:c6d03d0bc6493d1eda9beabc92f669d7&#34;&gt;Step 6 設置する&lt;/h1&gt;

&lt;p&gt;コピーしたコードを layouts の任意の html に貼り付けましょう。完成すると以下のように検索が可能になります。&lt;/p&gt;

&lt;p&gt;&lt;script&gt;
  (function() {
    var cx = &#39;004743453564496319247:9t8ean_mgiw&#39;;
    var gcse = document.createElement(&#39;script&#39;);
    gcse.type = &#39;text/javascript&#39;;
    gcse.async = true;
    gcse.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) +
        &#39;//cse.google.com/cse.js?cx=&#39; + cx;
    var s = document.getElementsByTagName(&#39;script&#39;)[0];
    s.parentNode.insertBefore(gcse, s);
  })();
&lt;/script&gt;
&lt;gcse:search&gt;&lt;/gcse:search&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 3 - Docker で nginx を構築する</title>
      <link>http://blog.syati.info/post/docker_tutorial_nginx/</link>
      <pubDate>Sun, 20 Sep 2015 15:49:48 JST</pubDate>
      
      <guid>http://blog.syati.info/post/docker_tutorial_nginx/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/docker_machine/&#34;&gt;docker-machine コマンドの使用方法・流れ&lt;/a&gt; で、docker vm の作成までは出来るようになったので、今回 docker vm に nginx container を立ち上げたいと思う。ここからが環境構築の本番。はやく MEAN とか LAMP 環境を構築したい思うが、急がば回れです。&lt;/p&gt;

&lt;p&gt;以前、何度か &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で docker に入門しましたが、その後挫折。 入門して nginx を構築を出来たはいいが、 MEAN とか LAMP の開発環境を構築するのがすごく困難な感じがして。&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;docker コマンド&lt;/a&gt; たくさんあるし、複数 container のリンクとか、データの永続化とか、ググればググるほど手強いぞ docker ってなってた・・・。&lt;/p&gt;

&lt;p&gt;が、時が経過した今、楽になってますよ。情報も増えてるし、何より docker-compose （複数コンテナの構築）が便利だった。それでは nginx を構築!!&lt;/p&gt;

&lt;p&gt;ただし、以下を読むより動画 &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で学ぶほうが分かりやすい。&lt;/p&gt;

&lt;h1 id=&#34;step1-docker-vm-の作成-復習:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step1 docker vm の作成(復習)&lt;/h1&gt;

&lt;p&gt;とりあえず docker vm を作成・利用する。忘れた方は、こちらで&lt;a href=&#34;http://blog.syati.info/post/docker_machine/&#34;&gt;docker-machine コマンドの使用方法・流れ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine create --driver virtualbox mynginx
$ eval &amp;quot;$(docker-machine env mynginx)&amp;quot;
$ docker-machine ls
NAME            ACTIVE   DRIVER       STATE     URL                         SWARM
mynginx         *        virtualbox   Running   tcp://192.168.99.100:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで上記の vm にたいして docker コマンドを発行できので、叩いてみる。コンテナがないので何も表示されない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

# 参考）eval で vm を指定しなかった場合
$ docker ps
Get http:///var/run/docker.sock/v1.20/containers/json: dial unix /var/run/docker.sock: no such file or directory.
* Are you trying to connect to a TLS-enabled daemon without TLS?
* Is your docker daemon up and running?
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step1-5-簡単な全体イメージ:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step1.5 簡単な全体イメージ&lt;/h1&gt;

&lt;p&gt;以下で使用する用語の全体イメージは以下のような感じである。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; から &lt;strong&gt;Image&lt;/strong&gt; を作成、Image から &lt;strong&gt;Container&lt;/strong&gt; を立ち上げる&lt;/p&gt;

&lt;h1 id=&#34;step2-dockerfile-の作成:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step2 Dockerfile の作成&lt;/h1&gt;

&lt;p&gt;Dockerfile （ Image 作成の手順書）を作成する。dir 構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mynginx/
└── Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Docker file
FROM nginx:latest                        # イメージの指定
MAINTAINER mizuki-y&amp;lt;mizuki-y@syati.info&amp;gt; # 作成者の情報
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で手順書と書いたが、２行しかない手順書である。
ただ単に、Image に&lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;Official Repository nginx&lt;/a&gt;を利用しますと記述しただけ。
&lt;strong&gt;RUN&lt;/strong&gt;、&lt;strong&gt;CMD&lt;/strong&gt; とか他にも命令はあるが、今回はシンプルに。いますぐ知りたい！！という場合は、以下を参考に。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1407/08/news031.html&#34;&gt;Dockerfileとdocker buildコマンドでDockerイメージの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step3-image-の作成:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step3 Image の作成&lt;/h1&gt;

&lt;p&gt;Dockerfile から Image を 作成するため &lt;strong&gt;build&lt;/strong&gt; コマンドを実施する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build コマンドのヘルプ見てみる
$ docker build --help

Usage:  docker build [OPTIONS] PATH | URL | -

Build a new image from the source code at PATH
## 多いので省略して、今回利用するものだけ
  -t, --tag=                      Repository name (and optionally a tag) for the image

# いろいろありますが、とりあえず OPTIONS -t （名前付け）だけ覚えればいいでしょう。PATH には Dockerfile パスを。
$ docker build -t syati:nginx .
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step4-image-の確認:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step4 Image の確認&lt;/h1&gt;

&lt;p&gt;作成した Image を確認するため &lt;strong&gt;images&lt;/strong&gt; コマンドを実施する。 Step2 で FROM しか指定していないので何も変わっていない（SIZE 同じ）が Dockerfile から Image を作成できている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
syati               nginx               a232c3216f20        9 seconds ago       132.9 MB
nginx               latest              0b354d33906d        10 days ago         132.9 MB　   # ベースとなったイメージ

# 参考） -t オプションつけないと &amp;lt;none&amp;gt; になる
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              dd06038a778d        10 minutes ago      132.9 MB
nginx               latest              0b354d33906d        10 days ago         132.9 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step5-container-を立ち上げる:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step5 Container を立ち上げる&lt;/h1&gt;

&lt;p&gt;作成した Image から Container を立ち上げるために &lt;strong&gt;run&lt;/strong&gt; コマンドを実施する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run コマンドのヘルプ見てみる
$ docker run --help

Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container
## 多いので省略して、今回利用するものだけ
  -d, --detach=false              Run container in background and print container ID
  -i, --interactive=false         Keep STDIN open even if not attached
  -P, --publish-all=false         Publish all exposed ports to random ports
  -p, --publish=[]                Publish a container&#39;s port(s) to the host

# コンテナを立ち上げる
$ docker run -P -d syati:nginx
5c70e0b84c91dc04d56fab9b9967765716008bfcb4d1fe102ba34d305994541b
## -P は コンテナで開いているポートと docker vm のポートをランダムにリンクする(以下の PORTS を見るとわかる）
## -d は コンテナをバックグラウンドで実行する(バックグラウンドで実行しないと次のコマンド打てなくなるから大事)

# ps コマンドで 動作を確認する
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                           NAMES
5c70e0b84c91        syati:nginx       &amp;quot;nginx -g &#39;daemon off&amp;quot;   46 seconds ago      Up 45 seconds       0.0.0.0:32771-&amp;gt;80/tcp, 0.0.0.0:32770-&amp;gt;443/tcp   trusting_lumiere


# 参考) -P でランダムなポートでリンクされても困っちゃうという場合は、以下のとおり -p を使って指定してあげる
$ docker run -p 8000:80 -d syati:nginx
2ac58799de9cfdceb02abf2b6050761801641b93c820097048cb46a9c0be3e6a

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                           NAMES
2ac58799de9c        syati:nginx       &amp;quot;nginx -g &#39;daemon off&amp;quot;   3 seconds ago       Up 3 seconds        443/tcp, 0.0.0.0:8000-&amp;gt;80/tcp   backstabbing_einstein
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile のことを少しでも知っていたら、以下の点を疑問に思うかもしれない。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dockerfile に CMD を記述していないのに、 COMMAND に nginx -g って・・。&lt;/li&gt;
&lt;li&gt;Dockerfile に EXPOSE を記述していないのに、 PORTSに 80 443 って・・。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これは利用イメージが &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;Official Repository nginx&lt;/a&gt; この &lt;a href=&#34;https://github.com/nginxinc/docker-nginx/blob/7f3ef0927ec619d20181e677c97f991df0d7d446/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; を利用して作成されているためである。&lt;/p&gt;

&lt;h1 id=&#34;step6-nginx-のデフォルトページを見る:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;Step6 nginx のデフォルトページを見る&lt;/h1&gt;

&lt;p&gt;Step1 で docker vm の ip を確認してポートを付与してあげる。 -p オプションでポートをした場合で考えると以下にアクセスすれば &lt;strong&gt;Welcome to nginx!&lt;/strong&gt; が見れるはず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://192.168.99.100:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;その他:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;その他&lt;/h1&gt;

&lt;h2 id=&#34;container-の中身を確認する:70cfd8bcb00d2acafeb3ae1cc961ca2c&#34;&gt;container の中身を確認する&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -t -i syati:nginx /bin/bash

# -t -i オプションは以下の通り
$ docker run --help
Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container
  -i, --interactive=false         Keep STDIN open even if not attached
  -t, --tty=false                 Allocate a pseudo-TTY
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 2 - docker-machine コマンドの使用方法・流れ</title>
      <link>http://blog.syati.info/post/docker_machine/</link>
      <pubDate>Wed, 09 Sep 2015 23:00:19 JST</pubDate>
      
      <guid>http://blog.syati.info/post/docker_machine/</guid>
      <description>

&lt;p&gt;Docker すごい。 何がすごいって環境構築が楽すぎる。以前は、Vagrant と Chef でゴリゴリ書いてアプリケーションが動くように頑張ってましたが、そんな事しなくても大方用意されてる。あとはその組み合わせ環境を構築するだけ。懸念点であった Vagrant 、Chef のような provision が、遅いということは今のところ無い。最初にイメージを DL してコンテナ化するので、若干の時間はかかるものの、それでも早い。 具体的な環境構築については、後日記そうと思う。&lt;/p&gt;

&lt;p&gt;今回は &lt;strong&gt;docker-machine コマンド&lt;/strong&gt;（コンテナを動かす vm を管理するコマンド）の使用方法、流れを記す。&lt;/p&gt;

&lt;h1 id=&#34;前提:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;li&gt;Docker Toolbox

&lt;ul&gt;
&lt;li&gt;Docker version 1.8.1, build d12ea79&lt;/li&gt;
&lt;li&gt;docker-machine version 0.4.1 (e2c88d6)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Virtual Box 5.0.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker-machine-コマンド-流れ:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;docker-machine コマンド、流れ&lt;/h1&gt;

&lt;p&gt;以下のレイヤーと対応するコマンドを覚えておくと、スムーズかもしれない。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;レイヤー&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;対応コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker Container&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docker&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker VM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docker-machine&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;OSX&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;step-1-docker-vm-を確認する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 1 docker vm を確認する&lt;/h2&gt;

&lt;p&gt;作成した docker vm を確認する。普段の &lt;strong&gt;ls&lt;/strong&gt; と同じ感じで使う頻度が高い。はじめは何もないので空である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-docker-vm-を作成する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 2 docker vm を作成する&lt;/h2&gt;

&lt;p&gt;docker vm を作成する。 以下のコマンドは、オプション driver で virtualbox を指定して、 vm 名を sample にしている。色々オプションがあるので、もっと詳しくという方は、&lt;a href=&#34;https://docs.docker.com/machine/reference/create/&#34;&gt;create&lt;/a&gt; を参考にしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine create --driver virtualbox sample

Creating VirtualBox VM...
Creating SSH key...
Starting VirtualBox VM...
Starting VM...
To see how to connect Docker to this machine, run: docker-machine env sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 1 の通り、作成した docker vm を確認してみる。vm が作成されているとともに、STATE を見ることで動作していること、URL を見ることで IP が割り振られていることが確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
sample             virtualbox   Running   tcp://192.168.99.103:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-docker-vm-を利用する:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;Step 3 docker vm を利用する&lt;/h2&gt;

&lt;p&gt;Step 2 まででは、対象の docker vm にコンテナを操作するコマンド(docker ps など)を実行できない。SSH で対象 vm に入れば可能だが、そんな面倒くさいことは毎回したくない。
そこで、以下のように env -&amp;gt; eval コマンドを実行して、利用する docker vm の環境変数を設定する。設定した docker vm の ACTIVE に * が記される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine env sample

export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.103:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/mizuki-y/.docker/machine/machines/sample&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;sample&amp;quot;
# Run this command to configure your shell:
# eval &amp;quot;$(docker-machine env sample)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval &amp;quot;$(docker-machine env sample)&amp;quot;
$ docker-machine ls

NAME      ACTIVE   DRIVER       STATE     URL                         SWARM
sample    *        virtualbox   Running   tcp://192.168.99.103:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで今後利用する docker コマンドは docker vm である sample に発行される。&lt;/p&gt;

&lt;h1 id=&#34;その他:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;その他&lt;/h1&gt;

&lt;h2 id=&#34;docker-vm-の中身を確認する-ssh-で入る:7c5114aaedd3fb4e06a20334e7806cc9&#34;&gt;docker vm の中身を確認する ssh で入る&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine ssh sample

                        ##         .
                  ## ## ##        ==
               ## ## ## ## ##    ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
           \______ o           __/
             \    \         __/
              \____\_______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| &#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &amp;lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
Boot2Docker version 1.8.1, build master : 7f12e95 - Thu Aug 13 03:24:56 UTC 2015
Docker version 1.8.1, build d12ea79
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker Part 1 - Mac に Docker をインストールする</title>
      <link>http://blog.syati.info/post/osx_docker_setup/</link>
      <pubDate>Thu, 03 Sep 2015 16:00:00 JST</pubDate>
      
      <guid>http://blog.syati.info/post/osx_docker_setup/</guid>
      <description>

&lt;p&gt;巷で Docker と騒がれて随分経ったでしょうか。私の Mac が新しくなったのを気に Docker に入門したいと思います。何か新しい開発の度にゴミが入るのはちょっと・・・、とも思いますしね。&lt;/p&gt;

&lt;p&gt;昔、Vagrant と Chef でローカル開発環境を構築していたこともありましたが provison が遅く、何だかなぁ〜と思っているうちに遠ざかっていました。Docker はコンテナ型で、vagrant より軽いのかな。&lt;/p&gt;

&lt;h1 id=&#34;前提:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-1-install-virtualbox:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 1 Install VirtualBox&lt;/h1&gt;

&lt;p&gt;VirtualBox5.0.2 だと Step 3 で動かなくなるので、&lt;a href=&#34;https://www.virtualbox.org/wiki/Testbuilds&#34;&gt;テストビルド&lt;/a&gt;から入れる。5.0.2 だった場合、 &lt;a href=&#34;#error-1:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;エラー1&lt;/a&gt;が出る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tukiyo3/items/c912fe9e403706964995&#34;&gt;Docker Toolbox付属のVirtualBox5.0.2では動かないので5.0.3を手動で入れること&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-2-install-docker-toolbox:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 2 Install Docker Toolbox&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask install dockertoolbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;(http://blog.syati.info/post/brew_cask/&#34;&gt;cask&lt;/a&gt; って思う方は、公式から &lt;a href=&#34;https://www.docker.com/toolbox&#34;&gt;Docker Toolbox&lt;/a&gt; をインストールしましょう。詳しい説明は、&lt;a href=&#34;https://docs.docker.com/mac/step_one/&#34;&gt;Install Docker Mac OS X&lt;/a&gt; 。インストールされる場所は以下のとおり、/usr/local/bin なので、path が通っていればコマンドが通るはずです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, the standard Docker Toolbox installation:
   installs binaries for the Docker tools in /usr/local/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コマンド例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker --version
Docker version 1.8.1, build d12ea79
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-とりあえず起動:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Step 3 とりあえず起動&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.com/mac/step_one/#step-3-verify-your-installation&#34;&gt;Installation&lt;/a&gt; に書いてあるとおり、以下のコマンドで、とりあえず起動、コマンドを実行してみる。&lt;a href=&#34;#error:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;エラー&lt;/a&gt;が無いことをもって、インストール・起動ができたことの確認を終了する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash &#39;/Applications/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh&#39;
$ docker run hello-world

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
  https://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;error:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;Error&lt;/h1&gt;

&lt;h2 id=&#34;error-1:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;VirtualBox 5.0.2 時で start.sh を叩いた場合&lt;/h2&gt;

&lt;p&gt;以下のとおり、vm が立ち上がってくれない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.

Setting environment variables for machine default...


                        ##         .
                  ## ## ##        ==
               ## ## ## ## ##    ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
           \______ o           __/
             \    \         __/
              \____\_______/


host is not running
docker is configured to use the default machine with IP
For help getting started, check out the docs at https://docs.docker.com

default is not running. Please start this with docker-machine start default

$ docker-machine start default
exit status 1
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;error-2:721a6b0475e6190575ce57e1a6fd89e9&#34;&gt;VirtualBox 5.0.3 にした後、以前作成した vm のエラー&lt;/h2&gt;

&lt;p&gt;設定が取れないので、以前作成した vm は削除して、あらためて start.sh を叩きましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine env default
open /Users/mizuki-y/.docker/machine/machines/default/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で Dockerfile を編集する</title>
      <link>http://blog.syati.info/post/emacs_dockerfilemode/</link>
      <pubDate>Wed, 02 Sep 2015 17:58:56 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacs_dockerfilemode/</guid>
      <description>

&lt;p&gt;Docker に入門して、Dockerfile を書くことになったので、とりあえず dockerfile-mode 。&lt;/p&gt;

&lt;h1 id=&#34;install:2ed0ba6269ab29d148cbcf4c83fce2a2&#34;&gt;Install&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;M-x package-list-package で以下をインストールする&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dockerfile-mode&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(autoload &#39;dockerfile-mode &amp;quot;dockerfile-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;Dockerfile\\&#39;&amp;quot; . dockerfile-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>brew cask が便利</title>
      <link>http://blog.syati.info/post/brew_cask/</link>
      <pubDate>Mon, 31 Aug 2015 18:44:21 JST</pubDate>
      
      <guid>http://blog.syati.info/post/brew_cask/</guid>
      <description>

&lt;p&gt;Web ページや App Store から App をダブルクリックしてインストールは面倒くさいので &lt;strong&gt;cask&lt;/strong&gt; をいれて解決する。&lt;/p&gt;

&lt;h1 id=&#34;インストールとコマンド:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;インストールとコマンド&lt;/h1&gt;

&lt;h2 id=&#34;インストール:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;cask&lt;/strong&gt; コマンドを使えるようにするために以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install caskroom/cask/brew-cask
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コマンド:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;コマンド&lt;/h2&gt;

&lt;p&gt;検索&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask search chrome

==&amp;gt; Partial matches
chrome-devtools                    google-chrome                      google-chrome-dev
chrome-remote-desktop-host         google-chrome-beta
chromecast                         google-chrome-canary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask install google-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アンインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew cask uninstall google-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;その他:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;cask でインストールしたアプリは以下にインストールされ、ホームフォルダ(~/)の Applications からアプリへのシンボリックリンクが作成される。ルート(/)にインストールが必要なものはパスワードが求められる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/homebrew-cask/Caskroom/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下、~/Applications の例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/Applications
├── Alfred 2.app -&amp;gt; /opt/homebrew-cask/Caskroom/alfred/2.7.2_400/Alfred 2.app
├── Alfred Preferences.app -&amp;gt; /opt/homebrew-cask/Caskroom/alfred/2.7.2_400/Alfred 2.app/Contents/Preferences/Alfred Preferences.app
├── Chrome Apps.localized
├── Emacs.app -&amp;gt; /opt/homebrew-cask/Caskroom/emacs/24.5-1/Emacs.app
├── Firefox.app -&amp;gt; /opt/homebrew-cask/Caskroom/firefox/40.0.3/Firefox.app
├── FirefoxDeveloperEdition.app -&amp;gt; /opt/homebrew-cask/Caskroom/firefoxdeveloperedition-ja/latest/FirefoxDeveloperEdition.app
├── Google Chrome.app -&amp;gt; /opt/homebrew-cask/Caskroom/google-chrome/latest/Google Chrome.app
├── ShiftIt.app -&amp;gt; /opt/homebrew-cask/Caskroom/shiftit/1.6.3/ShiftIt.app
└── Visual Studio Code.app -&amp;gt; /opt/homebrew-cask/Caskroom/visual-studio-code/0.7.0/Visual Studio Code.app
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考:9d81b5a07e5dbce04a4ad1efcbd9ec2f&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://caskroom.io/&#34;&gt;Homebrew Cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で Javascript なら js2-mode, tern-mode</title>
      <link>http://blog.syati.info/post/emacsJavascript2/</link>
      <pubDate>Mon, 31 Aug 2015 13:38:35 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacsJavascript2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/emacsJavascript/&#34;&gt;Emacs で JavaScript の開発環境を整える&lt;/a&gt; で、
Emacs と Javascript の開発環境を記しましたが、さらに改善できたので、メモメモ。&lt;/p&gt;

&lt;p&gt;ドットで jquery も underscore も browser もしてくれる。 angular も!!&lt;/p&gt;

&lt;h1 id=&#34;step-1-tern-のインストール-設定:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 1 tern のインストール・設定&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;npm で tern をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g tern
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.tern-config を以下のような感じで作成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;,
    &amp;quot;ecma5&amp;quot;,
    &amp;quot;underscore&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
    &amp;quot;angular&amp;quot;: {},
    &amp;quot;Node&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;step-2-emacs-の-package-をインストール:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 2 emacs の package をインストール&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;M-x package-list-package で以下の2点をインストールする（該当箇所で &lt;strong&gt;i&lt;/strong&gt; をタイプしてマークをつけて &lt;strong&gt;x&lt;/strong&gt; でインストールする）

&lt;ol&gt;
&lt;li&gt;tern&lt;/li&gt;
&lt;li&gt;js2-mode&lt;/li&gt;
&lt;li&gt;tern-auto-complete&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . js2-mode))


(add-hook &#39;js2-mode-hook
    (lambda ()
        (tern-mode t)))


(eval-after-load &#39;tern
    &#39;(progn
        (require &#39;tern-auto-complete)
        (tern-ac-setup)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;step-3-試す:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 3 試す&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular
  .module(&#39;MyApp&#39;, [])
  .controller(&#39;SomeCtrl&#39;, function($scope, $http) {
    # ここで $scope. とでも入れてみる
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ternjs.net/doc/manual.html&#34;&gt;tern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/js2-mode/&#34;&gt;js2-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mac の Terminal で ALT KEY </title>
      <link>http://blog.syati.info/post/altkey_in_osx-terminal/</link>
      <pubDate>Sun, 30 Aug 2015 13:38:35 JST</pubDate>
      
      <guid>http://blog.syati.info/post/altkey_in_osx-terminal/</guid>
      <description>

&lt;p&gt;Mac の環境を新しく作ることになったので、以前の環境が出来るまでメモしていく。&lt;/p&gt;

&lt;p&gt;バックアップからの復元を使えば楽なのだが、ゴミが入るのは・・・。&lt;/p&gt;

&lt;p&gt;ただし、意外とハマる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ターミナルで alt key が使えないよ！！&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;メタキーとして-option-キーを使用-にチェック:784ef5322b7ad8a18c627bd23e19b9ed&#34;&gt;&amp;ldquo;メタキーとして Option キーを使用&amp;rdquo; にチェック&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;ターミナル -&amp;gt; 環境設定 -&amp;gt; プロファイルタブ を開く。&lt;/li&gt;
&lt;li&gt;以下の図のように &amp;ldquo;メタキーとして Option キーを使用&amp;rdquo; にチェックが入っていないと思うで、チェックする。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;figure class=&#34;image-half__center&#34;&gt;
    
        &lt;img src=&#34;settings.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ターミナル -&amp;gt; 環境設定 -&amp;gt; プロファイルタブ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 4 - Hugo に SyntaxHighlighter を導入</title>
      <link>http://blog.syati.info/post/add_syntaxhighlighter_to_hugo/</link>
      <pubDate>Wed, 17 Jun 2015 22:42:39 JST</pubDate>
      
      <guid>http://blog.syati.info/post/add_syntaxhighlighter_to_hugo/</guid>
      <description>

&lt;p&gt;ソースコードをブログに載せる上で欠かせないのが SyntaxHighlighter ですよね。
というこで &lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;Syntax Highlighting&lt;/a&gt; を
参考にして早速導入する。&lt;/p&gt;

&lt;p&gt;dir 構成等は、以下の記事参照のこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/add_disqus_to_hugo/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-1-client-side-の-syntaxhighlighter-ライブラリ取得:25f7dcbfc05249f56e29c36f92828fdf&#34;&gt;Step 1 Client-side の SyntaxHighlighter ライブラリ取得&lt;/h1&gt;

&lt;p&gt;導入方法として &lt;strong&gt;Server-side&lt;/strong&gt; と &lt;strong&gt;Client-side&lt;/strong&gt; の方法がありますが、
今回は後者を利用します。また、ライブラリーはたくさんありますが、&lt;strong&gt;&lt;a href=&#34;http://prismjs.com/&#34;&gt;Prism&lt;/a&gt;&lt;/strong&gt;
を利用します。&lt;/p&gt;

&lt;p&gt;Prism のHPにいって利用したい好きな Themes と Languages にチェックをいれて、
ページ下部の DOWNLOAD JS と DOWNLOAD CSS から DL しましょう。
ちなみに当ページの Prism のテーマは Default(Okaidia) を利用しています。&lt;/p&gt;

&lt;h1 id=&#34;step-2-対象ファイルコピー:25f7dcbfc05249f56e29c36f92828fdf&#34;&gt;Step 2 対象ファイルコピー&lt;/h1&gt;

&lt;p&gt;DL したファイルを以下のようにコピーしてあげる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cp prism.js yourblog/static/js/
$ cp prism.css yourblog/static/css/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-custom-設定を加える:25f7dcbfc05249f56e29c36f92828fdf&#34;&gt;Step 3 custom 設定を加える&lt;/h1&gt;

&lt;p&gt;以下のように yourblog/layouts/partials/custom に移動して
&lt;strong&gt;対象ファイル１&lt;/strong&gt;と&lt;strong&gt;対象ファイル２&lt;/strong&gt;を編集します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd yourblog/layouts/partials/custom
$ tree -L 1
.
├── after_footer.html  # 対象ファイル１
├── asides
├── footer.html
├── head.html          # 対象ファイル２
├── header.html
└── navigation.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように対象ファイル１に１行追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;script src=&amp;quot;{{ .Site.BaseURL }}/js/prism.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように対象ファイル２に１行追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;link href=&amp;quot;{{ .Site.BaseURL }}/css/prism.css&amp;quot; media=&amp;quot;screen, projection&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで設定は終了。&lt;/p&gt;

&lt;h1 id=&#34;step-4-コードをいれてみる:25f7dcbfc05249f56e29c36f92828fdf&#34;&gt;Step 4 コードをいれてみる&lt;/h1&gt;

&lt;p&gt;新しい記事でも作成して、以下のような感じでコードをいれると。
~ 半角でいれると解釈されるため 〜 全角で入れています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;〜〜〜c
#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
    printf(&amp;quot;hello, world\n&amp;quot;);
    return;
}
〜〜〜
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あら素敵！！というふうになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
    printf(&amp;quot;hello, world\n&amp;quot;);
    return;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 3 - Hugo にコメント欄を導入</title>
      <link>http://blog.syati.info/post/add_disqus_to_hugo/</link>
      <pubDate>Tue, 09 Jun 2015 00:02:04 JST</pubDate>
      
      <guid>http://blog.syati.info/post/add_disqus_to_hugo/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt; 、 &lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt; で
Hugo を用いて github.io にブログを立ち上げましたが、コメント欄が無いので導入したい！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/comments/&#34;&gt;Comments in Hugo&lt;/a&gt; を参考にして早速、導入していこうとおもったが、
もっと楽にやりたいので、Part 1 で利用していた theme の hyde を変えて超簡単に導入する。&lt;/p&gt;

&lt;p&gt;全てが終われば &lt;a href=&#34;http://syati.github.io/yourblog/&#34;&gt;yourblog&lt;/a&gt; のようにコメント欄が作成できる。&lt;/p&gt;

&lt;h1 id=&#34;step-1-theme-を変える:d75fd18943ec8adafe7501d2e4ec3936&#34;&gt;Step 1 theme を変える&lt;/h1&gt;

&lt;p&gt;今まで通り、themes に中に theme を git clone してもいいのだが、
とりあえず今回は themes ディレクトリを利用しないことにする。&lt;/p&gt;

&lt;p&gt;なので &lt;strong&gt;config.toml&lt;/strong&gt; の&lt;strong&gt;theme&lt;/strong&gt; 設定を削除する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;title = &amp;quot;My New Hugo Site&amp;quot;
baseurl = &amp;quot;http://syati.github.io/yourblog&amp;quot;
languageCode = &amp;quot;ja-jp&amp;quot;
theme = &amp;quot;hyde&amp;quot;  //この行はもう不要なので削除する

[params]
  description = &amp;quot;This is yourblog&amp;quot;
  author = &amp;quot;your name&amp;quot;

[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag = &amp;quot;tags&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;theme を &lt;a href=&#34;https://github.com/Syati/greyshade&#34;&gt;Syati/greyshade&lt;/a&gt; に変更する。
git clone して yourblog のメインテーマにする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Syati/greyshade.git
$ tree -L 1 #こんなディレクトリ構成
.
├── greyshade
└── yourblog

$ cd greyshade
$ cp -R archetypes images layouts static ../yourblog
$ cd ../yourblog
$ rm -rf themes # 必要無いのでとりあえず削除
$ hugo server # テーマが変わっていることが確認できる
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-2-disqus-を導入:d75fd18943ec8adafe7501d2e4ec3936&#34;&gt;Step 2 Disqus を導入&lt;/h1&gt;

&lt;p&gt;導入が楽なので &lt;a href=&#34;https://disqus.com&#34;&gt;Disqus&lt;/a&gt; を利用する。&lt;/p&gt;

&lt;p&gt;Disqus に Sign up して http://[username].github.io でサイトを登録して
ゴニョゴニョすると、&lt;strong&gt;Choose your platform&lt;/strong&gt; とかでる画面になるので
&lt;strong&gt;Universal Code&lt;/strong&gt; をクリックすると、以下のコードをコメント欄を表示
させたいところに入れてね！と記載があるが、以下の &lt;strong&gt;[disqus_shortname]&lt;/strong&gt; だけ覚えておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    /* * * CONFIGURATION VARIABLES * * */
    var disqus_shortname = [disqus_shortname];
    
    /* * * DON&#39;T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
        dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
        (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
    })();
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://disqus.com/?ref_noscript&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-config-toml-を変更する:d75fd18943ec8adafe7501d2e4ec3936&#34;&gt;Step 3 config.toml を変更する&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/greyshade#setup&#34;&gt;テーマの設定&lt;/a&gt; を config.toml にコピペして、編集。
Step 2 で覚えておいた &lt;strong&gt;[disqus_shortname]&lt;/strong&gt; を設定に入れる。以下サンプル&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;title = &amp;quot;My New Hugo Site&amp;quot;
baseurl = &amp;quot;http://syati.github.io/yourblog&amp;quot;
languageCode = &amp;quot;ja-jp&amp;quot;
canonifyurls = true

[author]
name = &amp;quot;your name&amp;quot;
# email will use for gravatar
email = &amp;quot;&amp;quot;

[taxonomies]
category = &amp;quot;categories&amp;quot;

[params]
# site description, will show under navigation
description = &amp;quot;This is yourblog&amp;quot;

# RSS / Email (optional) subscription links (change if using something like Feedburner)
subscribe_rss = &amp;quot;/index.xml&amp;quot;
subscribe_email = &amp;quot;&amp;quot;

# social links
facebook_user = &amp;quot;&amp;quot;
googleplus_user = &amp;quot;&amp;quot;
twitter_user = &amp;quot;&amp;quot;
github_user = &amp;quot;&amp;quot;
coderwall_user = &amp;quot;&amp;quot;
stackoverflow_user = &amp;quot;&amp;quot;
stackoverflow_user_id = &amp;quot;&amp;quot;
linkedin_user = &amp;quot;&amp;quot;
pinterest_user = &amp;quot;&amp;quot;
delicious_user = &amp;quot;&amp;quot;
pinboard_user = &amp;quot;&amp;quot;
quora_user = &amp;quot;&amp;quot;
instagram_user = &amp;quot;&amp;quot;
behance_user = &amp;quot;&amp;quot;
douban_user = &amp;quot;&amp;quot;

# share links
facebook_like = true
twitter_tweet_button = true
google_plus_one = &amp;quot;true&amp;quot;
addthis_profile_id = &amp;quot;&amp;quot;

# Disqus Comments
disqus_short_name = &amp;quot;[disqus_shortname]&amp;quot; #ここに part2 で覚えた[disqus_shortname]を入れる
disqus_show_comment_count = false

# google analytics
google_analytics_tracking_id = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-記事にパラメータを加える:d75fd18943ec8adafe7501d2e4ec3936&#34;&gt;Step 4 記事にパラメータを加える&lt;/h1&gt;

&lt;p&gt;最後に記事のパラメータに &lt;strong&gt;comments = true&lt;/strong&gt; といれれば、disqus を読み込んでコメント欄が入る。
ただし、localhost では読み込まないようにしているので、記事ページ下部 に &lt;strong&gt;Comments&lt;/strong&gt;
とだけでてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;+++
date = &amp;quot;2015-06-06T17:20:38+09:00&amp;quot;
title = &amp;quot;first&amp;quot;
comments = true

+++

first page.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-5-新規記事のテンプレートを変更しておく:d75fd18943ec8adafe7501d2e4ec3936&#34;&gt;Step 5 新規記事のテンプレートを変更しておく&lt;/h1&gt;

&lt;p&gt;毎回コマンド（ &lt;strong&gt;hugo new post/new_post.md&lt;/strong&gt; ） で新規記事作成後に、
comments = true とパラメータ設定するのは面倒くさいので
yourblog/archetypes/default.md を以下のように変更しておくと楽ができる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;+++
Description = &amp;quot;&amp;quot;
Tags = []
Categories = []
comments = true
+++
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 2 - Hugo で github にブログを立ち上げる</title>
      <link>http://blog.syati.info/post/create_hugo_2/</link>
      <pubDate>Sun, 07 Jun 2015 21:55:31 JST</pubDate>
      
      <guid>http://blog.syati.info/post/create_hugo_2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt; では、ブログをローカルに構築したので、今回は github に repository をつくってブログを立ち上げる。
&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; を参考にして、セットアップ手順を記していく。&lt;/p&gt;

&lt;h1 id=&#34;step-1-github-に-blog-repository-をつくる:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 1 github に blog repository をつくる&lt;/h1&gt;

&lt;p&gt;github にアクセスして、repository をつくる。repository name がそのまま URL になる（以下のようなURL）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;http://[username].githug.io/[repo]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[] の意味

&lt;ul&gt;
&lt;li&gt;[username] : github の username&lt;/li&gt;
&lt;li&gt;[repo] : github に作成する repository name&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-2-blog-の設定をかいておく:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 2 blog の設定をかいておく&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;※以降、github に yourblog として repostitory を作成したとして記す。また、part 1 で作成した yourblog があるものとする&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;part 1 で作成した yourblog ディレクトリ内の &lt;strong&gt;config.toml&lt;/strong&gt; を開いて設定を書く（以下参考）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;title = &amp;quot;My New Hugo Site&amp;quot;
baseurl = &amp;quot;http://[username].github.io/yourblog&amp;quot;
languageCode = &amp;quot;ja-jp&amp;quot;
theme = &amp;quot;hyde&amp;quot;　# part 1 で選んだ theme を設定する
canonifyurls = true # 相対パスではなく baseurl を基点とした絶対パスにする

[params]
  description = &amp;quot;This is yourblog&amp;quot;
  author = &amp;quot;your name&amp;quot;

[taxonomies]
  category = &amp;quot;categories&amp;quot;
  tag = &amp;quot;tags&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;Configuring Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mojavy.com/blog/2013/04/26/toml/&#34;&gt;TOMLノススメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;toml-lang/toml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-3-repository-に-push-する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 3 repository に push する&lt;/h1&gt;

&lt;p&gt;yourblog ディレクトリで以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init # part 1 で作成した yourblog をリポジトリにする
$ git remote add origin git@github.com:[username]/yourblog.git # remote を設定する
$ git pull origin master
$
$ rm -rf public # このディレクトリは git subtree を利用して管理するので削除する
$ git add -A
$ git commit -m &amp;quot;Add hugo template&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-gh-pages-ブランチを作成する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 4 gh-pages ブランチを作成する&lt;/h1&gt;

&lt;p&gt;gh-pages ブランチには hugo で作成されたコンテンツ（ public ）のみ置いて、
関係のないもの（ archetypes, themes, etc ）は紛らわしいので管理したくない。&lt;/p&gt;

&lt;p&gt;そこで、master から独立したブランチを作成するために、orphan オプションを
つけて履歴のないブランチを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout --orphan gh-pages   # orphan ブランチ 作成
$ git rm --cached $(git ls-files)  # 要らないので、全て管理対象からすべて外す
$ git add README.md                # README.md だけいれておく
$ git commit -m &amp;quot;initial commit on gh-pages branch&amp;quot;
$ git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;master に戻って git subtree を利用して、gh-pages ブランチを master の public に取り込む。
subtree って何？って思う方は、下部の参考を見てください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout master
$ git subtree add --prefix=public git@github.com:[username]/yourblog.git gh-pages --squash
$ git subtree pull --prefix=public git@github.com:[username]/yourblog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo コマンドで public を生成して以下のように push していくことで、
master に変更を加え、gh-pages にも変更を加える事が出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo
$ git add -A
$ git commit -m &amp;quot;Updating site&amp;quot;
$ git push origin master
$ git subtree push --prefix=public git@github.com:Syati/yourblog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的に新しい記事を書いて github.io に公開（ Deploy ）する際、上記の手順を踏むことになる。
毎回これするのはめんどくさいので、Step 5 に進む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/akiko-pusu/items/7c0a99b8cb37882d2cfe&#34;&gt;gitの空ブランチを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/03/alternatives-to-git-submodule-git-subtree/&#34;&gt;Git Submodule の代替: Git Subtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shogo82148/items/04b29b195dbbb373152f&#34;&gt;git-subtree移行メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/marutanm/items/d02e7d5ff8ed7c2c4b95&#34;&gt;submoduleとsubtree-mergingの使い分け&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-5-めんどさい-deploy-はスクリプトを利用する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 5 めんどさい Deploy はスクリプトを利用する&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; の &lt;strong&gt;deploy.sh&lt;/strong&gt; に書かれている以下を利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
# !/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:[username]/yourblog.git gh-pages　
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;spencerlyon2/hugo_gh_blog&lt;/a&gt; のレポジトリに deploy.sh
があるので　DL してきて修正するのがはやいかも。&lt;/p&gt;

&lt;p&gt;deploy.sh を yourblog ディレクトリに保存したのち、実行できるように以下を実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで新しい記事を書いて github.io に公開（ Deploy ）する際は、以下のコマンドを実行するのみで良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Part 1 - Hugo で github にブログを立ち上げる</title>
      <link>http://blog.syati.info/post/create_hugo/</link>
      <pubDate>Fri, 05 Jun 2015 21:55:31 JST</pubDate>
      
      <guid>http://blog.syati.info/post/create_hugo/</guid>
      <description>

&lt;p&gt;WordPress でブログをつくっていましたが、記事投稿が面倒くさなって続かない。
なぜかと考えた時にテキストで書いたものを簡単に POST できないからである。
過去に org2blog などを試し、簡単になった！！と喜んでいた時期もあったが、
WordPress の Version Up などで POST できなくり、それっきり・・・。&lt;/p&gt;

&lt;p&gt;今回は、ついに上記のことを打開できる策を見つけたのだ。
それが &lt;strong&gt;Hugo で github.io 上にブログを立ち上げることだ。&lt;/strong&gt;
何が良いかといえば、markdown でかけて、github に push するだけでブログ
が更新されることだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart Guide&lt;/a&gt; にならって
セットアップ手順を記していく。Part 1 では、まずはブログをローカルに構築する。
&lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt; で、github.io にブログを立ち上げる。&lt;/p&gt;

&lt;h1 id=&#34;step-1-インストールしましょう:21ff63570566c64813270f2340abd251&#34;&gt;Step 1 インストールしましょう&lt;/h1&gt;

&lt;h2 id=&#34;osx-の場合:21ff63570566c64813270f2340abd251&#34;&gt;OSX の場合&lt;/h2&gt;

&lt;p&gt;以下のコマンドでおしまい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ubuntu-の場合:21ff63570566c64813270f2340abd251&#34;&gt;Ubuntu の場合&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo relase&lt;/a&gt; から適したものをDLして以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo dpkg -i hugo_0.14_amd64.deb　# 自分に適したパッケージを選んでね
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-2-ブログをつくろう:21ff63570566c64813270f2340abd251&#34;&gt;Step 2 ブログをつくろう&lt;/h1&gt;

&lt;p&gt;以下のコマンドを実行して、カレントディレクトリにブログの雛形を作成できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site ./yourblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;雛形はこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yourblog/
├── archetypes  # 新規記事を作成した際に利用される雛形を置く場所
├── config.toml # 設定を書くファイル
├── content     # 記事などが入る場所
├── data        # 今回は利用しない（サイトを生成するときに利用する DATA などを置く。詳しくは http://gohugo.io/extras/datafiles/ ）
├── layouts     # 今回は利用しない（サイトを生成するときの雛形）
└── static      # 今回は利用しない（サイトで利用する js, css, images などを置く）
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-3-新しい記事をつくろう:21ff63570566c64813270f2340abd251&#34;&gt;Step 3 新しい記事をつくろう&lt;/h1&gt;

&lt;p&gt;yourblog ディレクトリで以下のコマンド実行して、新規記事を作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで新規記事が作成される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;content/
└── post
    └── hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello.md の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;+++
date = &amp;quot;2015-06-05T23:04:20+09:00&amp;quot;
draft = true # この行を消せば step 5 の -\-buildDrafts オプションはいりません
title = &amp;quot;hello&amp;quot;

+++

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-4-テーマをインストールしよう:21ff63570566c64813270f2340abd251&#34;&gt;Step 4 テーマをインストールしよう&lt;/h1&gt;

&lt;p&gt;自分好みのテーマをさがすために、テーマ一式いれてみる。yourblog ディレクトリで以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone -\-recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;step-5-ブログを見てみよう:21ff63570566c64813270f2340abd251&#34;&gt;Step 5 ブログを見てみよう&lt;/h1&gt;

&lt;p&gt;とりあえず準備はととのったので、サーバーを立ち上げてブログを見てみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server -\-theme=hyde -\-buildDrafts

1 of 1 draft rendered
0 future content 
1 pages created
0 paginator pages created
0 tags created
0 categories created
in 7 ms
Serving pages from /home/mizuki-y/Documents/yourblog/public
Web Server is available at http://127.0.0.1:1313/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスするとブログが見れるようになっている。&lt;/p&gt;

&lt;p&gt;theme を以下のように変更して、自分の好きなものを選ぼう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server -\-theme=slim -\-buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;コマンドオプションについて

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--theme&lt;/strong&gt;: themes ディレクトリに入っているディレクトリ名を指定してあげる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--buildDrafts&lt;/strong&gt;: draft ステータスのものを表示するためのオプション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブログ構築完成。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt; で、github.io にブログを立ち上げる。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
