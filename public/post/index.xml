<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Syati.info</title>
    <link>http://blog.syati.info/post/</link>
    <description>Recent content in Posts on Syati.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <lastBuildDate>Sat, 29 Apr 2017 19:02:10 +0900</lastBuildDate>
    
	<atom:link href="http://blog.syati.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sequel Pro の ctrl&#43;h ヘルプを backspace に変更する</title>
      <link>http://blog.syati.info/post/sequel_pro_overwrite_ctrl_h/</link>
      <pubDate>Sat, 29 Apr 2017 19:02:10 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/sequel_pro_overwrite_ctrl_h/</guid>
      <description>&lt;p&gt;Sequel Pro 便利ですよね。簡単に select とか DB 作成、きれいな結果表示などなど。
ただ、emacs ユーザーの私にとってウザくてウザくて堪らないのが、&lt;strong&gt;ctrl+h&lt;/strong&gt; を打つと、このソフトでは&lt;strong&gt;ヘルプ&lt;/strong&gt;を開くということ。頼むから Backspace にしてくれ！！と。&lt;/p&gt;
&lt;p&gt;調べてみると、上書き出来るではないか！！&lt;a href=&#34;https://github.com/sequelpro/sequelpro/issues/1974&#34;&gt;github の issue&lt;/a&gt;に書いてあった。ということで以下に、その方法記す。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>うるさいよ &#39;You are running composer with xdebug enabled. This has a major impact on runtime performance&#39;</title>
      <link>http://blog.syati.info/post/php_composer/</link>
      <pubDate>Wed, 13 Jul 2016 01:01:50 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/php_composer/</guid>
      <description>&lt;p&gt;最近、php を触る機会が増えたので、メモメモ。
composer 叩いたら xdebug を enable にしてると遅いよっていう以下のメッセージが流れるので composer 叩いた時に出ないようにする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sequelize Part 2 - リレーションについて</title>
      <link>http://blog.syati.info/post/sequelize_relation/</link>
      <pubDate>Sat, 02 Jan 2016 22:00:15 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_relation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/sequelize_getting_started/&#34;&gt;Sequelize Part 1&lt;/a&gt; で、なんとなくわかってきた！！と思うので、今回は、リレーションについて学ぶ。&lt;strong&gt;belongsTo, hasOne, hasMany, belongsToMany&lt;/strong&gt; の4つだけ。後、オプションを少し学べばやりたいことは大方出来るようになる。後々、WEBアプリケーションフレームワークから利用する際、ここら辺の理解は必須ですからね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sequelize Part 1 - 導入してREPLで試してみる</title>
      <link>http://blog.syati.info/post/sequelize_getting_started/</link>
      <pubDate>Tue, 29 Dec 2015 12:38:07 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_getting_started/</guid>
      <description>&lt;p&gt;ちょっと前まで MEAN とか流行っていた気がするんですが、今はどうなんですかね？実際にちょっとしたWEBサービスで利用してみると、MongoDB が思った以上に厄介だった。トランザクションが無いのが、どうしても辛い。後々考えると面倒くさいことになるのは目に見えているのでヤメヤメ。ということで従来通り RDB を利用、そして、ORM は &lt;strong&gt;Sequelize&lt;/strong&gt; を利用したので、その辺をメモっていきたいと思う。&lt;/p&gt;
&lt;p&gt;以降で説明するコードは、&lt;a href=&#34;https://github.com/Syati/sequelize-sample/tree/master/01_repl&#34;&gt;01_repl&lt;/a&gt; にあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeScript でユニットテストする。カバレッジもねっ!!</title>
      <link>http://blog.syati.info/post/typescript_coverage/</link>
      <pubDate>Sat, 31 Oct 2015 14:00:39 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_coverage/</guid>
      <description>&lt;p&gt;AltJs ってトランスパイルした後、テストを実行させる必要があるから・・、面倒くさいんだよね。なんか、あまり情報もないし、これだから AltJs は・・・と思うわけですが、やってみると案外大したことないもんです。&lt;/p&gt;
&lt;p&gt;今回は、TypeScript のコードのユニットテスト、カバレッジを記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&#34;&gt;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeScript でフロントエンドを実装する</title>
      <link>http://blog.syati.info/post/typescript_webpack/</link>
      <pubDate>Sat, 10 Oct 2015 18:37:23 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_webpack/</guid>
      <description>&lt;p&gt;型が恋しいのです。仮引数見た時に、何が入るか簡単に知りたいのです。実引数の型が違った時には教えてほしいのです。そんなこんなで、TypeScript がお気に入りです。&lt;/p&gt;
&lt;p&gt;今回は、どうやってフロントエンドで TypeScript を利用するか記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>package.json を一括更新</title>
      <link>http://blog.syati.info/post/upgrade_package_json/</link>
      <pubDate>Wed, 07 Oct 2015 22:00:32 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/upgrade_package_json/</guid>
      <description>&lt;p&gt;package.json の dependencies を、どうやって一括で更新するのかなと思ってたら！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これで簡単に更新できる！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LiveReload with Firefox</title>
      <link>http://blog.syati.info/post/livereload_firefox/</link>
      <pubDate>Fri, 25 Sep 2015 08:49:12 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/livereload_firefox/</guid>
      <description>&lt;p&gt;Firefox LiveReload + grunt-contrib-watch LiveReload で以下の warning メッセージがでて、LiveReload うごかないよ！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are using an old incompatible version of the command-line tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Please run following command &amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;なんでや・・と思いながら、よくよくアドオンの見たら書いてあった・・・。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This extension is deprecated. The latest version is available at&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://help.livereload.com/kb/general-use/browser-extensions&#34;&gt;http://help.livereload.com/kb/general-use/browser-extensions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Hugo Part 5 - Hugo に Google カスタム検索エンジンを導入</title>
      <link>http://blog.syati.info/post/hugo_search/</link>
      <pubDate>Mon, 21 Sep 2015 16:25:47 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/hugo_search/</guid>
      <description>&lt;p&gt;記事が多くなってくると、やっぱり検索したくなるもんです。Hugo で検索を使うには、&lt;a href=&#34;https://gohugo.io/tools&#34;&gt;Tools&lt;/a&gt; に書いてある通り以下の方法があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自前でインデックスを作成して提供する方法
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blevesearch/hugoidx&#34;&gt;Hugoidx&lt;/a&gt;: Bleve を用いる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;: grunt と lunr.js を用いる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当ページでは、&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;Github Gist&lt;/a&gt;  を用いて検索を実現していますが、お手軽さでいうと、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; ですね。なので今回は、&lt;a href=&#34;https://cse.google.co.jp/cse/&#34;&gt;Google カスタム検索エンジン&lt;/a&gt; の導入方法を紹介。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Part 3 - Docker で nginx を構築する</title>
      <link>http://blog.syati.info/post/docker_tutorial_nginx/</link>
      <pubDate>Sun, 20 Sep 2015 15:49:48 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/docker_tutorial_nginx/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/docker_machine/&#34;&gt;docker-machine コマンドの使用方法・流れ&lt;/a&gt; で、docker vm の作成までは出来るようになったので、今回 docker vm に nginx container を立ち上げたいと思う。ここからが環境構築の本番。はやく MEAN とか LAMP 環境を構築したい思うが、急がば回れです。&lt;/p&gt;
&lt;p&gt;以前、何度か &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で docker に入門しましたが、その後挫折。 入門して nginx を構築を出来たはいいが、 MEAN とか LAMP の開発環境を構築するのがすごく困難な感じがして。&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;docker コマンド&lt;/a&gt; たくさんあるし、複数 container のリンクとか、データの永続化とか、ググればググるほど手強いぞ docker ってなってた・・・。&lt;/p&gt;
&lt;p&gt;が、時が経過した今、楽になってますよ。情報も増えてるし、何より docker-compose （複数コンテナの構築）が便利だった。それでは nginx を構築!!&lt;/p&gt;
&lt;p&gt;ただし、以下を読むより動画 &lt;a href=&#34;http://dotinstall.com/lessons/basic_docker&#34;&gt;Docker入門 (全11回)&lt;/a&gt; で学ぶほうが分かりやすい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Part 2 - docker-machine コマンドの使用方法・流れ</title>
      <link>http://blog.syati.info/post/docker_machine/</link>
      <pubDate>Wed, 09 Sep 2015 23:00:19 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/docker_machine/</guid>
      <description>&lt;p&gt;Docker すごい。 何がすごいって環境構築が楽すぎる。以前は、Vagrant と Chef でゴリゴリ書いてアプリケーションが動くように頑張ってましたが、そんな事しなくても大方用意されてる。あとはその組み合わせ環境を構築するだけ。懸念点であった Vagrant 、Chef のような provision が、遅いということは今のところ無い。最初にイメージを DL してコンテナ化するので、若干の時間はかかるものの、それでも早い。 具体的な環境構築については、後日記そうと思う。&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;docker-machine コマンド&lt;/strong&gt;（コンテナを動かす vm を管理するコマンド）の使用方法、流れを記す。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Part 1 - Mac に Docker をインストールする</title>
      <link>http://blog.syati.info/post/osx_docker_setup/</link>
      <pubDate>Thu, 03 Sep 2015 16:00:00 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/osx_docker_setup/</guid>
      <description>&lt;p&gt;巷で Docker と騒がれて随分経ったでしょうか。私の Mac が新しくなったのを気に Docker に入門したいと思います。何か新しい開発の度にゴミが入るのはちょっと・・・、とも思いますしね。&lt;/p&gt;
&lt;p&gt;昔、Vagrant と Chef でローカル開発環境を構築していたこともありましたが provison が遅く、何だかなぁ〜と思っているうちに遠ざかっていました。Docker はコンテナ型で、vagrant より軽いのかな。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で Dockerfile を編集する</title>
      <link>http://blog.syati.info/post/emacs_dockerfilemode/</link>
      <pubDate>Wed, 02 Sep 2015 17:58:56 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacs_dockerfilemode/</guid>
      <description>&lt;p&gt;Docker に入門して、Dockerfile を書くことになったので、とりあえず dockerfile-mode 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>brew cask が便利</title>
      <link>http://blog.syati.info/post/brew_cask/</link>
      <pubDate>Mon, 31 Aug 2015 18:44:21 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/brew_cask/</guid>
      <description>&lt;p&gt;Web ページや App Store から App をダブルクリックしてインストールは面倒くさいので &lt;strong&gt;cask&lt;/strong&gt; をいれて解決する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で Javascript なら js2-mode, tern-mode</title>
      <link>http://blog.syati.info/post/emacsjavascript2/</link>
      <pubDate>Mon, 31 Aug 2015 13:38:35 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacsjavascript2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/emacsjavascript/&#34;&gt;Emacs で JavaScript の開発環境を整える&lt;/a&gt; で、
Emacs と Javascript の開発環境を記しましたが、さらに改善できたので、メモメモ。&lt;/p&gt;
&lt;p&gt;ドットで jquery も underscore も browser もしてくれる。 angular も!!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac の Terminal で ALT KEY </title>
      <link>http://blog.syati.info/post/altkey_in_osx-terminal/</link>
      <pubDate>Sun, 30 Aug 2015 13:38:35 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/altkey_in_osx-terminal/</guid>
      <description>&lt;p&gt;Mac の環境を新しく作ることになったので、以前の環境が出来るまでメモしていく。&lt;/p&gt;
&lt;p&gt;バックアップからの復元を使えば楽なのだが、ゴミが入るのは・・・。&lt;/p&gt;
&lt;p&gt;ただし、意外とハマる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ターミナルで alt key が使えないよ！！&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Part 4 - Hugo に SyntaxHighlighter を導入</title>
      <link>http://blog.syati.info/post/add_syntaxhighlighter_to_hugo/</link>
      <pubDate>Wed, 17 Jun 2015 22:42:39 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/add_syntaxhighlighter_to_hugo/</guid>
      <description>&lt;p&gt;ソースコードをブログに載せる上で欠かせないのが SyntaxHighlighter ですよね。
というこで &lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;Syntax Highlighting&lt;/a&gt; を
参考にして早速導入する。&lt;/p&gt;
&lt;p&gt;dir 構成等は、以下の記事参照のこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.syati.info/post/add_disqus_to_hugo/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo Part 3 - Hugo にコメント欄を導入</title>
      <link>http://blog.syati.info/post/add_disqus_to_hugo/</link>
      <pubDate>Tue, 09 Jun 2015 00:02:04 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/add_disqus_to_hugo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt; 、 &lt;a href=&#34;http://blog.syati.info/post/create_hugo_2/&#34;&gt;Part 2&lt;/a&gt; で
Hugo を用いて github.io にブログを立ち上げましたが、コメント欄が無いので導入したい！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gohugo.io/extras/comments/&#34;&gt;Comments in Hugo&lt;/a&gt; を参考にして早速、導入していこうとおもったが、
もっと楽にやりたいので、Part 1 で利用していた theme の hyde を変えて超簡単に導入する。&lt;/p&gt;
&lt;p&gt;全てが終われば &lt;a href=&#34;http://syati.github.io/yourblog/&#34;&gt;yourblog&lt;/a&gt; のようにコメント欄が作成できる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Part 2 - Hugo で github にブログを立ち上げる</title>
      <link>http://blog.syati.info/post/create_hugo_2/</link>
      <pubDate>Sun, 07 Jun 2015 21:55:31 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/create_hugo_2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/create_hugo/&#34;&gt;Part 1&lt;/a&gt; では、ブログをローカルに構築したので、今回は github に repository をつくってブログを立ち上げる。
&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; を参考にして、セットアップ手順を記していく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Part 1 - Hugo で github にブログを立ち上げる</title>
      <link>http://blog.syati.info/post/create_hugo/</link>
      <pubDate>Fri, 05 Jun 2015 21:55:31 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/create_hugo/</guid>
      <description>&lt;p&gt;WordPress でブログをつくっていましたが、記事投稿が面倒くさなって続かない。
なぜかと考えた時にテキストで書いたものを簡単に POST できないからである。
過去に org2blog などを試し、簡単になった！！と喜んでいた時期もあったが、
WordPress の Version Up などで POST できなくり、それっきり・・・。&lt;/p&gt;
&lt;p&gt;今回は、ついに上記のことを打開できる策を見つけたのだ。
それが &lt;strong&gt;Hugo で github.io 上にブログを立ち上げることだ。&lt;/strong&gt;
何が良いかといえば、markdown でかけて、github に push するだけでブログ
が更新されることだ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular test sample 1</title>
      <link>http://blog.syati.info/post/angular-test-sample-recipe1/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/angular-test-sample-recipe1/</guid>
      <description>&lt;p&gt;js ってテストしにくいよねってことで今流行りの angular で unit test する。
最初なので、事細かに説明するつもりで書いてみる。&lt;/p&gt;
&lt;p&gt;サンプルは以下から git clone してください。ソースと突き合わせながら見るといいかも。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/angular-test-sample&#34;&gt;https://github.com/Syati/angular-test-sample&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cygwin &#43; Zsh &#43; NTEmacs で作る Linux環境 in Windows</title>
      <link>http://blog.syati.info/post/make_windows_emacs/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/make_windows_emacs/</guid>
      <description>&lt;p&gt;最近のメインOSは、Ubuntu で Windows とはお別れしているのですが、
否応なく Windows を利用しなければいけない時がある Syati です。
そんな時、欠かせないのが Cygwin、Zsh、NTEmacs です。もっと欲を言えば
AutoHotkey もあるのですが、それは、また次の機会に。&lt;/p&gt;
&lt;p&gt;今回は、Cygwin、Zsh、NTEmacs でWindows に Linux環境を構築をする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Development Environment in my OSX</title>
      <link>http://blog.syati.info/post/make_env_mac/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/make_env_mac/</guid>
      <description>&lt;p&gt;仕事で Mac を利用することになった Syati です。main os が Ubuntu だからか、Windows より全然開発環境を構築しやすい。
ただ、やることはたくさんあった。ストレスが無い開発環境を構築することは難しいものです・・・。ある程度、構築できたので記録しておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で CoffeeScript を AutoComplete する</title>
      <link>http://blog.syati.info/post/coffee_script/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/coffee_script/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://tatsuyano.github.io/blog/2013/03/19/coffee-mode-used-ac-dict/&#34;&gt;Coffee-modeでauto-completeを使えるようにする&lt;/a&gt; を参考に、
coffee script で auto-complete 使えるようにして、ついでに jquery も auto-complete に追加してあげる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で JavaScript の開発環境を整える</title>
      <link>http://blog.syati.info/post/emacsjavascript/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacsjavascript/</guid>
      <description>&lt;p&gt;開発環境はとっても大事なんですが、構築までに時間がかかりますよね。
ということで私の環境を忘れないうちにメモ！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs を 256色で起動する</title>
      <link>http://blog.syati.info/post/emacs_256/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacs_256/</guid>
      <description>最近は、さくらVPSで色々と遊んでいますので、そのメモ。
.bashrc 又は .zshrc に以下を書き込むことで、emacs を256色で起動できる。
alias emacs=&#39;TERM=xterm-256color emacs&#39;  emacs が256色で起動出来ているかどうか確認するには、 emacs M-x から 以下のコマンドを実行しましょう。</description>
    </item>
    
    <item>
      <title>Google Fonts をローカルで利用する</title>
      <link>http://blog.syati.info/post/typecatchar/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/typecatchar/</guid>
      <description>Google Fonts をローカル環境で使いたいと思い調べたら、意外と簡単だった。以下は参考のほぼ転記。
環境  OS:ubuntu 12.04  インストール $ sudo add-apt-repository ppa:andrewsomething/typecatcher $ sudo apt-get update $ sudo apt-get install typecatcher メニュー　-&amp;gt; アクセサリー -&amp;gt; TypeCatchar で起動した後、好きなフォントを選んでインストール
その他 ubuntu 13.10 以上は、以下の通り
$ sudo apt-get install typecatcher 参考  http://www.webupd8.org/2013/08/easily-download-and-install-google-web.html  </description>
    </item>
    
    <item>
      <title>nkf で直す文字化け</title>
      <link>http://blog.syati.info/post/nkf/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/nkf/</guid>
      <description>&lt;p&gt;Windows 時代の遺産で、文字コードが shift_jis のファイルがたくさんありました。
開いてびっくり文字化け。全部 utf-8 に修正してしまいます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>node 利用するなら、まずは環境変数を設定しましょう</title>
      <link>http://blog.syati.info/post/node_path/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/node_path/</guid>
      <description>&lt;p&gt;javascript を REPL で利用できるといえば &lt;strong&gt;node&lt;/strong&gt; 。underscore.js を試したいと思いハマったメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org2blog でブログに接続する際のパスワードを .netrc に保存しておく</title>
      <link>http://blog.syati.info/post/org2blognetrc/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/org2blognetrc/</guid>
      <description>&lt;p&gt;org2blog で毎回ログインする際に求められるパスワード入力がめんどくさいが、init.el に書いておくのもちょっと…とおもっている場合は、.netrc を使うのがお勧め&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org2blog の記事にコードブロックを入れる</title>
      <link>http://blog.syati.info/post/org2bloginsertsourcecode/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/org2bloginsertsourcecode/</guid>
      <description>&lt;p&gt;org2blog の記事投稿でコードも綺麗に投稿したい。ってことで先日 &lt;a href=&#34;http://syati.info/?p=1746&#34;&gt;org2blogからの投稿&lt;/a&gt; の続き。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reattach-to-user-namespace: unsupported new OS を解決する</title>
      <link>http://blog.syati.info/post/solvereattachtousernamespaceinmac109/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/solvereattachtousernamespaceinmac109/</guid>
      <description>&lt;p&gt;ワーニングが出たら気になる。何が何でも消したくなってしまう。解決手順は以下のとおり。10.9に対応した reattach-to-user-namespace にするだけです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scala の開発環境</title>
      <link>http://blog.syati.info/post/make_scala_env/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/make_scala_env/</guid>
      <description>&lt;p&gt;ubuntu で scala の開発環境を構築するメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vagrant、chef-solo で開発環境を構築する</title>
      <link>http://blog.syati.info/post/vagrant_css_problem/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/vagrant_css_problem/</guid>
      <description>&lt;p&gt;最近、vagrant、chef-solo で開発環境を構築するのがブームなSyatiです。xampp、mamp とかで？？ができないとかよくありますが、面倒くさいので皆サーバーと同じ環境にして開発しましょうよ。そしたら、？？ができないなんてことがなくなりますので。&lt;/p&gt;
&lt;p&gt;今回はまったのは、vagrant の共有フォルダに apache のバーチャルホストのドキュメントルートを設定して、ローカルでソースコードをいじり、ブラウザで確認している時である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSSをいじって、ブラウザで確認しても反映されないのである。もちろんキャッシュクリア済み。やむなくvagrantを再起動すると反映されるのである&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bowerrc で install ディレクトリを変更する</title>
      <link>http://blog.syati.info/post/bowerrc/</link>
      <pubDate>Sun, 01 Mar 2015 21:37:06 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/bowerrc/</guid>
      <description>&lt;p&gt;bower install をしたはいいが、デフォルトでインストールされるディレクトリ(bower_components)を以下の例のように変えたい、そんな時は。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;project/
&lt;ul&gt;
&lt;li&gt;js
&lt;ul&gt;
&lt;li&gt;bower_components
&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>synerge ubuntu</title>
      <link>http://blog.syati.info/post/autostart_synerge_ubuntu/</link>
      <pubDate>Sun, 01 Mar 2015 21:37:06 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/autostart_synerge_ubuntu/</guid>
      <description>&lt;p&gt;Windows 7 と Ubuntu 12.04 のマシンを利用している Syati ですが、毎回 Ubuntu を立ち上げてログイン、synergy を立ち上げるのは面倒くさいので Ubuntu ログイン画面で自動で起動させるようにした。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>