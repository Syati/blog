<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Hugo on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://syati.github.io/blog/categories/hugo/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Sun, 07 Jun 2015 21:55:31 JST</updated>
    
    <item>
      <title>Hugo で github にブログを立ち上げる Part 2</title>
      <link>http://syati.github.io/blog/post/create_hugo_2/</link>
      <pubDate>Sun, 07 Jun 2015 21:55:31 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/create_hugo_2/</guid>
      <description>

&lt;p&gt;Part 1 では、ブログをローカルに構築したので、今回は github に repository をつくってブログを立ち上げる
&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; を参考にして、
セットアップ手順を記していく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;※注意&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;ソースコード内の &lt;strong&gt;&amp;quot;&lt;/strong&gt; が、二重引用符（始）、二重引用符（終）に 変わっているので&lt;br /&gt;
コピペしてもバグります。コピペする場合は修正してください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-1-github-に-blog-repository-をつくる:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 1 github に blog repository をつくる&lt;/h1&gt;

&lt;p&gt;github にアクセスして、repository をつくる。repository name がそのまま URL になる（以下のようなURL）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;http://[username].githug.io/[repo]&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[] の意味

&lt;ul&gt;
&lt;li&gt;[username] : github の username&lt;/li&gt;
&lt;li&gt;[repo] : github に作成する repository name&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-2-blog-の設定をかいておく:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 2 blog の設定をかいておく&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;※以降、github に yourblog として repostitory を作成したとして記す。また、part 1 で作成した yourblog があるものとする&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;part 1 で作成した yourblog ディレクトリ内の &lt;strong&gt;config.toml&lt;/strong&gt; を開いて設定を書く（以下参考）。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
title = &amp;ldquo;My New Hugo Site&amp;rdquo;
baseurl = &amp;ldquo;http://[username].github.io/yourblog&amp;rdquo;
languageCode = &amp;ldquo;ja-jp&amp;rdquo;
theme = &amp;ldquo;hyde&amp;rdquo;　# part 1 で選んだ theme を設定する&lt;/p&gt;

&lt;p&gt;[params]
  description = &amp;ldquo;This is yourblog&amp;rdquo;
  author = &amp;ldquo;your name&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[taxonomies]
  category = &amp;ldquo;categories&amp;rdquo;
  tag = &amp;ldquo;tags&amp;rdquo;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;Configuring Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mojavy.com/blog/2013/04/26/toml/&#34;&gt;TOMLノススメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;toml-lang/toml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-3-repository-に-push-する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 3 repository に push する&lt;/h1&gt;

&lt;p&gt;yourblog ディレクトリで以下のコマンドを実行する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ git init # part 1 で作成した yourblog をリポジトリにする
$ git remote add origin git@github.com:[username]/yourblog.git # remote を設定する
$ git pull origin master
$
$ rm -rf public # このディレクトリは git subtree を利用して管理するので削除する
$ git add -A
$ git commit -m &amp;ldquo;Add hugo template&amp;rdquo;
$ git push origin master
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-4-gh-pages-ブランチを作成する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 4 gh-pages ブランチを作成する&lt;/h1&gt;

&lt;p&gt;gh-pages ブランチには hugo で作成されたコンテンツ（ public ）のみ置いて、
関係のないもの（ archetypes, themes, etc ）は紛らわしいので管理したくない。&lt;/p&gt;

&lt;p&gt;そこで、master から独立したブランチを作成するために、orphan オプションを
つけて履歴のないブランチを作成する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ git checkout &amp;ndash;orphan gh-pages   # orphan ブランチ 作成
$ git rm &amp;ndash;cached $(git ls-files)  # 要らないので、全て管理対象からすべて外す
$ git add README.md                # README.md だけいれておく
$ git commit -m &amp;ldquo;initial commit on gh-pages branch&amp;rdquo;
$ git push -u origin gh-pages
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;master に戻って git subtree を利用して、gh-pages ブランチを master の public に取り込む。
subtree って何？って思う方は、下部の参考を見てください。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ git checkout master
$ git subtree add &amp;ndash;prefix=public git@github.com:[username]/yourblog.git gh-pages --squash
$ git subtree pull &amp;ndash;prefix=public git@github.com:[username]/yourblog.git gh-pages
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;hugo コマンドで public を生成して以下のように push していくことで、
master に変更を加え、gh-pages にも変更を加える事が出来る。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo
$ git add -A
$ git commit -m &amp;ldquo;Updating site&amp;rdquo;
$ git push origin master
$ git subtree push &amp;ndash;prefix=public git@github.com:Syati/yourblog.git gh-pages
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;基本的に新しい記事を書いて github.io に公開（ Deploy ）する際、上記の手順を踏むことになる。
毎回これするのはめんどくさいので、Step 5 に進む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/akiko-pusu/items/7c0a99b8cb37882d2cfe&#34;&gt;gitの空ブランチを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/03/alternatives-to-git-submodule-git-subtree/&#34;&gt;Git Submodule の代替: Git Subtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shogo82148/items/04b29b195dbbb373152f&#34;&gt;git-subtree移行メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/marutanm/items/d02e7d5ff8ed7c2c4b95&#34;&gt;submoduleとsubtree-mergingの使い分け&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;step-5-めんどさい-deploy-はスクリプトを利用する:a830f51eecde66402e29d75bcb0532ee&#34;&gt;Step 5 めんどさい Deploy はスクリプトを利用する&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; の &lt;strong&gt;deploy.sh&lt;/strong&gt; に書かれている以下を利用する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
# !/bin/bash&lt;/p&gt;

&lt;p&gt;echo -e &amp;ldquo;\033[0;32mDeploying updates to GitHub&amp;hellip;\033[0m&amp;rdquo;&lt;/p&gt;

&lt;p&gt;# Build the project.
hugo&lt;/p&gt;

&lt;p&gt;# Add changes to git.
git add -A&lt;/p&gt;

&lt;p&gt;# Commit changes.
msg=&amp;ldquo;rebuilding site &lt;code&gt;date&lt;/code&gt;&amp;ldquo;
if [ $# -eq 1 ]
  then msg=&amp;ldquo;$1&amp;rdquo;
fi
git commit -m &amp;ldquo;$msg\&amp;rdquo;&lt;/p&gt;

&lt;p&gt;# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:[username]/yourblog.git gh-pages　
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;spencerlyon2/hugo_gh_blog&lt;/a&gt; のレポジトリに deploy.sh
があるので　DL してきて修正するのがはやいかも。&lt;/p&gt;

&lt;p&gt;deploy.sh を yourblog ディレクトリに保存したのち、実行できるように以下を実行する。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ chmod +x deploy.sh
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これで新しい記事を書いて github.io に公開（ Deploy ）する際は、以下のコマンドを実行するのみで良い。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ ./deploy.sh
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo で github にブログを立ち上げる Part 1</title>
      <link>http://syati.github.io/blog/post/create_hugo/</link>
      <pubDate>Fri, 05 Jun 2015 21:55:31 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/create_hugo/</guid>
      <description>

&lt;p&gt;WordPress でブログをつくっていましたが、記事投稿が面倒くさなって続かない。
なぜかと考えた時にテキストで書いたものを簡単に POST できないからである。
過去に org2blog などを試し、簡単になった！！と喜んでいた時期もあったが、
WordPress の Version Up などで POST できなくり、それっきり・・・。&lt;/p&gt;

&lt;p&gt;今回は、ついに上記のことを打開できる策を見つけたのだ。
それが &lt;strong&gt;Hugo で github.io 上にブログを立ち上げることだ。&lt;/strong&gt;
何が良いかといえば、markdown でかけて、github に push するだけでブログ
が更新されることだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart Guide&lt;/a&gt; にならって
セットアップ手順を記していく。Part 1 では、まずはブログをローカルに構築する。
Part 2 で、github.io にブログを立ち上げる。&lt;/p&gt;

&lt;h1 id=&#34;step-1-インストールしましょう:21ff63570566c64813270f2340abd251&#34;&gt;Step 1 インストールしましょう&lt;/h1&gt;

&lt;h2 id=&#34;osx-の場合:21ff63570566c64813270f2340abd251&#34;&gt;OSX の場合&lt;/h2&gt;

&lt;p&gt;以下のコマンドでおしまい。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ brew install hugo
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;ubuntu-の場合:21ff63570566c64813270f2340abd251&#34;&gt;Ubuntu の場合&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo relase&lt;/a&gt; から適したものをDLして以下のコマンドを実行する。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ sudo dpkg -i hugo_0.14_amd64.deb　# 自分に適したパッケージを選んでね
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-2-ブログをつくろう:21ff63570566c64813270f2340abd251&#34;&gt;Step 2 ブログをつくろう&lt;/h1&gt;

&lt;p&gt;以下のコマンドを実行して、カレントディレクトリにブログの雛形を作成できる。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo new site ./yourblog
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;雛形はこんな感じになる。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
yourblog/
├── archetypes  # 新規記事を作成した際に利用される雛形を置く場所
├── config.toml # 設定を書くファイル
├── content     # 記事などが入る場所
├── data        # 今回は利用しない（サイトを生成するときに利用する DATA などを置く。詳しくは &lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34;&gt;http://gohugo.io/extras/datafiles/&lt;/a&gt; ）
├── layouts     # 今回は利用しない（サイトを生成するときの雛形）
└── static      # 今回は利用しない（サイトで利用する js, css, images などを置く）
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-3-新しい記事をつくろう:21ff63570566c64813270f2340abd251&#34;&gt;Step 3 新しい記事をつくろう&lt;/h1&gt;

&lt;p&gt;yourblog ディレクトリで以下のコマンド実行して、新規記事を作成する。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo new post/hello.md
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで新規記事が作成される。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
content/
└── post
    └── hello.md
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;hello.md の中身はこんな感じ。
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;
+++
date = &amp;ldquo;2015-06-05T23:04:20+09:00&amp;rdquo;
draft = true # この行を消せば step 5 の --buildDrafts オプションはいりません
title = &amp;ldquo;hello&amp;rdquo;&lt;/p&gt;

&lt;p&gt;+++&lt;/p&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-4-テーマをインストールしよう:21ff63570566c64813270f2340abd251&#34;&gt;Step 4 テーマをインストールしよう&lt;/h1&gt;

&lt;p&gt;自分好みのテーマをさがすために、テーマ一式いれてみる。yourblog ディレクトリで以下のコマンドを実行する。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ git clone --recursive &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;https://github.com/spf13/hugoThemes&lt;/a&gt; themes
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-5-ブログを見てみよう:21ff63570566c64813270f2340abd251&#34;&gt;Step 5 ブログを見てみよう&lt;/h1&gt;

&lt;p&gt;とりあえず準備はととのったので、サーバーを立ち上げてブログを見てみる。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo server --theme=hyde --buildDrafts&lt;/p&gt;

&lt;p&gt;1 of 1 draft rendered
0 future content
1 pages created
0 paginator pages created
0 tags created
0 categories created
in 7 ms
Serving pages from /home/mizuki-y/Documents/yourblog/public
Web Server is available at &lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:1313/&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; にアクセスするとブログが見れるようになっている。&lt;/p&gt;

&lt;p&gt;theme を以下のように変更して、自分の好きなものを選ぼう。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo server --theme=slim --buildDrafts
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コマンドオプションについて

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--theme&lt;/strong&gt;: themes ディレクトリに入っているディレクトリ名を指定してあげる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--buildDrafts&lt;/strong&gt;: draft ステータスのものを表示するためのオプション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブログ構築完成。&lt;/p&gt;

&lt;p&gt;Part 2 で、github.io にブログを立ち上げる。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
