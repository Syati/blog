<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Typescript on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.syati.info/categories/typescript/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Sat, 31 Oct 2015 14:00:39 JST</updated>
    
    <item>
      <title>TypeScript でユニットテストする。カバレッジもねっ!!</title>
      <link>http://blog.syati.info/post/typescript_coverage/</link>
      <pubDate>Sat, 31 Oct 2015 14:00:39 JST</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_coverage/</guid>
      <description>

&lt;p&gt;AltJs ってトランスパイルした後、テストを実行させる必要があるから・・、面倒くさいんだよね。なんか、あまり情報もないし、これだから AltJs は・・・と思うわけですが、やってみると案外大したことないもんです。&lt;/p&gt;

&lt;p&gt;今回は、TypeScript のコードのユニットテスト、カバレッジを記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&#34;&gt;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-0-事前準備:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 0: 事前準備&lt;/h2&gt;

&lt;h3 id=&#34;流れ:134ba188964091106b5909c7aef27c8d&#34;&gt;流れ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ts でコードを書く&lt;/li&gt;
&lt;li&gt;トランスパイルする（js と map を出力）&lt;/li&gt;
&lt;li&gt;js をテストする&lt;/li&gt;
&lt;li&gt;map を利用して&lt;strong&gt;ts カバレッジ&lt;/strong&gt;を測る&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ライブラリ:134ba188964091106b5909c7aef27c8d&#34;&gt;ライブラリ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;npm install -g mocha istanbul remap-istanbul&lt;/strong&gt; でそれぞれコマンドが利用できるようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test framework

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/mocha&#34;&gt;mocha&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;テストフレームワークですね。他にも karma, jasmine など、たくさんありますがシンプルなので、とっつきやすかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coverage

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/istanbul&#34;&gt;istanbul&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;カバレッジを測定してくれる。カバレッジがあると、ユニットテストのモチベーションが上がりますよね！！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/remap-istanbul&#34;&gt;remap-istanbul&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;istanbul だけでは、トランスパイル後（js）のカバレッジしか測れないので、map を利用して、ts のカバレッジを測る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-とりあえずテストを書く:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 1: とりあえずテストを書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/master/011_test_sample&#34;&gt;プロジェクト&lt;/a&gt; を確認しておく。全体が理解しやすくなると思う。&lt;/p&gt;

&lt;p&gt;テストは、単にコンストラクタで与えられた値を保持しているかどうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// app/src/main.ts
export default class TestTarget {
    constructor(public name){
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// app/test/main.test.ts
import assert from &#39;power-assert&#39;;
import TestTarget from &#39;../src/main&#39;;

describe(&amp;quot;TestTarget&amp;quot;, () =&amp;gt; {
    it(&amp;quot;should have a name&amp;quot;, () =&amp;gt; {
        let testTarget = new TestTarget(&amp;quot;test&amp;quot;);
        assert.equal(testTarget.name, &amp;quot;test&amp;quot;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すごいシンプルですね。&lt;/p&gt;

&lt;h2 id=&#34;step-2-トランスパイルする:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 2: トランスパイルする&lt;/h2&gt;

&lt;p&gt;tsc コマンドを叩く前に設定ファイルを書いときましょう。以下の tsconfig.json になります。
とくに変わった点はないですね。重要なポイントとしては、&lt;strong&gt;&amp;ldquo;sourceMap&amp;rdquo;: true&lt;/strong&gt;です。
後々、ts のカバレッジを測るために必要になってきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.6.2&amp;quot;,
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,
    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,
    &amp;quot;sourceMap&amp;quot;: true
  },
  &amp;quot;exclude&amp;quot;: [
    &amp;quot;dist&amp;quot;,
    &amp;quot;node_modules&amp;quot;
  ],
  &amp;quot;files&amp;quot;: [
    &amp;quot;typings/tsd.d.ts&amp;quot;,
    &amp;quot;app/src/main.ts&amp;quot;,
    &amp;quot;app/test/main.test.ts&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトルートで tsc コマンドを叩きます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-テストする:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 3: テストする&lt;/h2&gt;

&lt;p&gt;Step 2 でトランスパイル済みなので、ts ファイル以外に js、map ファイルが存在すると思います。ディレクトリが汚れてあたふたするかもしれませんが、package.json に clean スクリプトを書くことで解決できるので、今は我慢。&lt;/p&gt;

&lt;p&gt;プロジェクトルートでテストコマンドを叩いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mocha app/test/*.test.js

  TestTarget

    ✓ should have a name


  1 passing (8ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功、終わりです。&lt;/p&gt;

&lt;p&gt;味気ないですね。&lt;/p&gt;

&lt;p&gt;ユニットテストのモチベーションをあげるためにも、やっぱりカバレッジですよ！！&lt;/p&gt;

&lt;h2 id=&#34;step-4-カバレッジを測る:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 4: カバレッジを測る&lt;/h2&gt;

&lt;p&gt;とくに必要なことはありません。Step 0 で説明したとおり &lt;strong&gt;istanbul&lt;/strong&gt; を利用するだけ。
すこし異なっているのは、 mocha が _mocha を利用するということです。理由は、以下のとおり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gotwarlost/istanbul/issues/44#issuecomment-16093330&#34;&gt;https://github.com/gotwarlost/istanbul/issues/44#issuecomment-16093330&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istanbul cover _mocha -- ./app/test/*.test.js

  TestTarget

    ✓ should have a name


  1 passing (5ms)


=============================== Coverage summary ===============================
Statements   : 100% ( 6/6 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 2/2 )
Lines        : 100% ( 6/6 )
================================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力に、&lt;strong&gt;coverage summary&lt;/strong&gt; が増えましたね。また、プロジェクトルートに &lt;strong&gt;coverage&lt;/strong&gt; ディレクトリが出力されているので、中の index.html を見ましょう。通過したコード、100% の数字にやる気が出てきますね。ただし、これはトランスパイル後の js のカバレッジなので、あと一手間かけてあげましょう。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;coverage_js.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;トランスパイル後のカバレッジ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;step-5-ソースマップから-ts-のカバレッジを測る:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 5: ソースマップから ts のカバレッジを測る&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;coverage&lt;/strong&gt; ディレクトリにて以下のコマンドたたいてあげるだけです。ts のカバレッジが html-repot ディレクトリに出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ remap-istanbul -i coverage.json -o html-report -t html
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;coverage_ts.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ts のカバレッジ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;ts のカバレッジが測れました。ただ、一連のコマンドを毎回叩くのは疲れるので、&lt;strong&gt;package.json&lt;/strong&gt; を用いて楽にしましょう。&lt;/p&gt;

&lt;p&gt;＊図が Step 4 とデザインが違うのは、remap-istanbul で利用している istanbul のバージョンが古いからだと思われる&lt;/p&gt;

&lt;h2 id=&#34;step-6-package-json-で楽する:134ba188964091106b5909c7aef27c8d&#34;&gt;Step 6: package.json で楽する&lt;/h2&gt;

&lt;p&gt;一連のコマンドを &lt;strong&gt;package.json&lt;/strong&gt; に書いておきましょう。以下サンプル。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  ...

  &amp;quot;scripts&amp;quot;: {
    &amp;quot;postinstall&amp;quot;: &amp;quot;tsd install&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;find -E . -regex &#39;./app/.+\\.(js|map)$&#39; -type f | xargs rm &amp;amp;&amp;amp; rm -rf ./build&amp;quot;,
    &amp;quot;pretest&amp;quot;: &amp;quot;tsc&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;istanbul cover _mocha -- ./app/test/*.test.js&amp;quot;,
    &amp;quot;posttest&amp;quot;: &amp;quot;cd coverage &amp;amp;&amp;amp; remap-istanbul -i coverage.json -o html-report -t html&amp;quot;
    },
    
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大事なのは、 &lt;strong&gt;1. pretest、&lt;/strong&gt; &lt;strong&gt;2. test、&lt;/strong&gt; &lt;strong&gt;3. posttest&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm test&lt;/strong&gt; を実行することで &lt;strong&gt;1. 2. 3.&lt;/strong&gt;の順番で実行してくれます。今回の step2 - step5 をコマンド１つで済せられるということですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 次回からはこれだけでよい
$ npm test 

# js とか map 削除したいとおもったら
$ npm clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他:134ba188964091106b5909c7aef27c8d&#34;&gt;その他&lt;/h2&gt;

&lt;h3 id=&#34;istanbul-yml-でカバレッジレポートのディレクトリ指定する:134ba188964091106b5909c7aef27c8d&#34;&gt;.istanbul.yml でカバレッジレポートのディレクトリ指定する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;.istanbul.yml&lt;/strong&gt; に以下のように書いてあげることで、レポートの出力先を変えることが出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#.istanbul.yml
reporting:
    dir: ./docs/coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もっとカスタマイズしたい場合は、以下のコマンドからデフォルト設定など説明をみるといいかも。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istanbul help config
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript でフロントエンドを実装する</title>
      <link>http://blog.syati.info/post/typescript_webpack/</link>
      <pubDate>Sat, 10 Oct 2015 18:37:23 JST</pubDate>
      
      <guid>http://blog.syati.info/post/typescript_webpack/</guid>
      <description>

&lt;p&gt;型が恋しいのです。仮引数見た時に、何が入るか簡単に知りたいのです。実引数の型が違った時には教えてほしいのです。そんなこんなで、TypeScript がお気に入りです。&lt;/p&gt;

&lt;p&gt;今回は、どうやってフロントエンドで TypeScript を利用するか記していこうと思います。本記事のコードは以下のURLにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-0-事前準備:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 0: 事前準備&lt;/h2&gt;

&lt;p&gt;以下のコマンドを使用するのでグローバルにインストールしておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Package managers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;: プロジェクトで利用するライブラリをインストールするために利用する。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://definitelytyped.org/tsd/&#34;&gt;tsd&lt;/a&gt;: プロジェクトで利用するライブラリの定義ファイルをインストールするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install tsd -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;typescript compiler&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;tsc&lt;/a&gt;: ts ファイルをコンパイルするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install typescript -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://webpack.github.io/docs/&#34;&gt;webpack&lt;/a&gt;: フロントエンドでモジュールをロードするために利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-いろいろ初期化-プロジェクトの作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 1: いろいろ初期化(プロジェクトの作成)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir app
$ tsd init  # いろいろ尋ねてくるけど enter 連打
$ npm init

$ tree ./ -L 1
./
├── app             # ここに html, ts などを入れる
├── package.json    # npm init で作成される（ライブラリ管理）
├── tsd.json        # tsd init で作成される（ライブラリの定義を管理）
└── typings         # tsd init で作成される（ライブラリの定義のソースコードが入る）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-ライブラリのインストール:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 2: ライブラリのインストール&lt;/h2&gt;

&lt;p&gt;npm と tsd を利用して、ライブラリ、ライブラリの定義をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
## プロジェクトで利用するライブラリのインストール
$ npm install typescript --save
$ npm install jquery --save
## TypeScript で利用するにはもちろん定義が必要なので、tsd で jquery をインストール
$ tsd install jquery --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-app-を作成:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 3: app を作成&lt;/h2&gt;

&lt;p&gt;app の下に app.ts として以下を作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as $ from &#39;jquery&#39;;

$(() =&amp;gt; {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app の下に index.html として以下を作成。 後に app.ts から bundle.js を作成するため、この段階で script を埋め込んでおく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;/&amp;gt;
        &amp;lt;script src=&amp;quot;build/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4-コンパイルする:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 4: コンパイルする&lt;/h2&gt;

&lt;p&gt;step 3 で作成した app.ts を js に変換するために tsc の設定を作成する。
&lt;strong&gt;step 1 ./&lt;/strong&gt; で tsconfig.json として以下のように作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;sourceMap&amp;quot;: false,     # ソースマップ作成の有無
    &amp;quot;target&amp;quot;: &amp;quot;ES5&amp;quot;,        # target の設定
    &amp;quot;outDir&amp;quot;: &amp;quot;app/build&amp;quot;,  # 出力先
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;    # module のスタイル
  },
  &amp;quot;files&amp;quot;: [                # ファイル
    &amp;quot;typings/tsd.d.ts&amp;quot;,
    &amp;quot;app/app.ts&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずコンパイルしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に app.js が作成されているので覗いてみる。&lt;strong&gt;require&lt;/strong&gt; の記述があるが、もちろんフロントではつかえない。そこで、フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; を用いる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var $ = require(&#39;jquery&#39;);
$(function () {
    $(document.body).html(&amp;quot;hello&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでのプロジェクトディレクトリは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./
├── package.json
├── tsconfig.json
├── tsd.json
├── app
│   ├── index.html
│   ├── app.ts
│   └── build
│       └── app.js
├── node_modules
│   └── jquery
│   └── typescript
└── typings
    ├── jquery
    │   └── jquery.d.ts
    └── tsd.d.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-5-webpack-導入:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;Step 5: webpack 導入&lt;/h2&gt;

&lt;p&gt;フロントでも require を利用するために、&lt;strong&gt;webpack&lt;/strong&gt; をインストールして、ついでに、TypeScript のファイルを処理できるように loader をいれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# webpack のインストールは、step 0 でインストールしたものとする
# typescript ファイルを処理できるように以下の webpack 用の loader をプロジェクトのライブラリに追加する
npm install ts-loader --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;webpack コマンドをたたけば require などの依存関係を解決してくれるのだが、いろいろとオプションを指定する必要がある。毎回コマンドの度に、それらを打ち込むのは面倒くさいので、設定ファイルに書いておいてあげる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 1 ./&lt;/strong&gt; で webpack.config.js として以下のように webpack の設定を作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  entry: &#39;./app/app.ts&#39;,
  output: {
    filename: &#39;./app/build/bundle.js&#39;
  },
  resolve: {
    // Add `.ts` and `.tsx` as a resolvable extension.
    extensions: [&#39;&#39;, &#39;.webpack.js&#39;, &#39;.web.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.js&#39;]
  },
  module: {
    loaders: [
      // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`
      { test: /\.tsx?$/, loader: &#39;ts-loader&#39; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで簡単に webpack とコマンドをたたくだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1 ./ で以下のコマンドを実行
$ webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/build に bundle.js が作成されているので覗いてみる。require が解決され、単一の js ファイルとして出力されていることがわかる。&lt;/p&gt;

&lt;p&gt;これで index.html をブラウザーで覗いてみると、&lt;strong&gt;hello&lt;/strong&gt; の文字が出力されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/typescript-sample/tree/0cdd35bc90b3222d2b292bf63fdddeb009b77b52/webpack&#34;&gt;ソースはこちらから&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:949a9ea0a4a82c7fd7909a699c67654c&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jbrantly.com/typescript-and-webpack/&#34;&gt;TypeScript and webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
