<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Syati.info</title>
    <link>http://blog.syati.info/categories/javascript/</link>
    <description>Recent content in JavaScript on Syati.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Jan 2016 22:00:15 +0900</lastBuildDate>
    
	<atom:link href="http://blog.syati.info/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sequelize Part 2 - リレーションについて</title>
      <link>http://blog.syati.info/post/sequelize_relation/</link>
      <pubDate>Sat, 02 Jan 2016 22:00:15 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_relation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/sequelize_getting_started/&#34;&gt;Sequelize Part 1&lt;/a&gt; で、なんとなくわかってきた！！と思うので、今回は、リレーションについて学ぶ。&lt;strong&gt;belongsTo, hasOne, hasMany, belongsToMany&lt;/strong&gt; の4つだけ。後、オプションを少し学べばやりたいことは大方出来るようになる。後々、WEBアプリケーションフレームワークから利用する際、ここら辺の理解は必須ですからね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sequelize Part 1 - 導入してREPLで試してみる</title>
      <link>http://blog.syati.info/post/sequelize_getting_started/</link>
      <pubDate>Tue, 29 Dec 2015 12:38:07 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_getting_started/</guid>
      <description>&lt;p&gt;ちょっと前まで MEAN とか流行っていた気がするんですが、今はどうなんですかね？実際にちょっとしたWEBサービスで利用してみると、MongoDB が思った以上に厄介だった。トランザクションが無いのが、どうしても辛い。後々考えると面倒くさいことになるのは目に見えているのでヤメヤメ。ということで従来通り RDB を利用、そして、ORM は &lt;strong&gt;Sequelize&lt;/strong&gt; を利用したので、その辺をメモっていきたいと思う。&lt;/p&gt;
&lt;p&gt;以降で説明するコードは、&lt;a href=&#34;https://github.com/Syati/sequelize-sample/tree/master/01_repl&#34;&gt;01_repl&lt;/a&gt; にあります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>package.json を一括更新</title>
      <link>http://blog.syati.info/post/upgrade_package_json/</link>
      <pubDate>Wed, 07 Oct 2015 22:00:32 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/upgrade_package_json/</guid>
      <description>&lt;p&gt;package.json の dependencies を、どうやって一括で更新するのかなと思ってたら！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これで簡単に更新できる！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で Javascript なら js2-mode, tern-mode</title>
      <link>http://blog.syati.info/post/emacsjavascript2/</link>
      <pubDate>Mon, 31 Aug 2015 13:38:35 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacsjavascript2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/emacsjavascript/&#34;&gt;Emacs で JavaScript の開発環境を整える&lt;/a&gt; で、
Emacs と Javascript の開発環境を記しましたが、さらに改善できたので、メモメモ。&lt;/p&gt;
&lt;p&gt;ドットで jquery も underscore も browser もしてくれる。 angular も!!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular test sample 1</title>
      <link>http://blog.syati.info/post/angular-test-sample-recipe1/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/angular-test-sample-recipe1/</guid>
      <description>&lt;p&gt;js ってテストしにくいよねってことで今流行りの angular で unit test する。
最初なので、事細かに説明するつもりで書いてみる。&lt;/p&gt;
&lt;p&gt;サンプルは以下から git clone してください。ソースと突き合わせながら見るといいかも。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/angular-test-sample&#34;&gt;https://github.com/Syati/angular-test-sample&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs で JavaScript の開発環境を整える</title>
      <link>http://blog.syati.info/post/emacsjavascript/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/emacsjavascript/</guid>
      <description>&lt;p&gt;開発環境はとっても大事なんですが、構築までに時間がかかりますよね。
ということで私の環境を忘れないうちにメモ！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>node 利用するなら、まずは環境変数を設定しましょう</title>
      <link>http://blog.syati.info/post/node_path/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/node_path/</guid>
      <description>&lt;p&gt;javascript を REPL で利用できるといえば &lt;strong&gt;node&lt;/strong&gt; 。underscore.js を試したいと思いハマったメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bowerrc で install ディレクトリを変更する</title>
      <link>http://blog.syati.info/post/bowerrc/</link>
      <pubDate>Sun, 01 Mar 2015 21:37:06 +0900</pubDate>
      
      <guid>http://blog.syati.info/post/bowerrc/</guid>
      <description>&lt;p&gt;bower install をしたはいいが、デフォルトでインストールされるディレクトリ(bower_components)を以下の例のように変えたい、そんな時は。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;project/
&lt;ul&gt;
&lt;li&gt;js
&lt;ul&gt;
&lt;li&gt;bower_components
&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>