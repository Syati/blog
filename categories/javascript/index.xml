<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://syati.github.io/blog/categories/javascript/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Thu, 04 Jun 2015 23:09:38 JST</updated>
    
    <item>
      <title>Angular test sample 1</title>
      <link>http://syati.github.io/blog/post/angular-test-sample-recipe1/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/angular-test-sample-recipe1/</guid>
      <description>

&lt;p&gt;js ってテストしにくいよねってことで今流行りの angular で unit test する。
最初なので、事細かに説明するつもりで書いてみる。&lt;/p&gt;

&lt;p&gt;サンプルは以下から git clone してください。ソースと突き合わせながら見るといいかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/angular-test-sample&#34;&gt;https://github.com/Syati/angular-test-sample&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;準備:d28091e7273529f0913311111ae23332&#34;&gt;準備&lt;/h1&gt;

&lt;h2 id=&#34;ubuntu:d28091e7273529f0913311111ae23332&#34;&gt;ubuntu&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;node &amp;amp; npm
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo apt-get install nodejs
sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mac:d28091e7273529f0913311111ae23332&#34;&gt;mac&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;node &amp;amp; npm
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
brew install node
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;共通:d28091e7273529f0913311111ae23332&#34;&gt;共通&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bower
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo npm install -g bower
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;karma
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo npm install -g karma-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;実施-サンプルを-clone-して-test:d28091e7273529f0913311111ae23332&#34;&gt;実施：サンプルを CLONE して TEST&lt;/h1&gt;

&lt;p&gt;github にサンプルを書いたので clone する。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
git clone git@github.com:Syati/angular-test-sample.git
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;prj-依存環境を入れる:d28091e7273529f0913311111ae23332&#34;&gt;prj 依存環境を入れる&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
cd your_clone_path/angular-test-sample/controller/recipe1
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-実行する:d28091e7273529f0913311111ae23332&#34;&gt;test 実行する&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
npm test
&lt;/code&gt;&lt;/pre&gt;
    

&lt;p&gt;以下のような出力で、テストが成功する。
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
WARN [karma]: Port 9876 in use
INFO [karma]: Karma v0.12.24 server started at &lt;a href=&#34;http://localhost:9877/&#34;&gt;http://localhost:9877/&lt;/a&gt;
INFO [launcher]: Starting browser PhantomJS
INFO [PhantomJS 1.9.8 (Linux)]: Connected on socket -9tnO3qPnHscs3zVjS4l with id 62869514
PhantomJS 1.9.8 (Linux): Executed 1 of 1 SUCCESS (0.038 secs / 0.007 secs)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id=&#34;説明:d28091e7273529f0913311111ae23332&#34;&gt;説明&lt;/h1&gt;

&lt;h2 id=&#34;directory:d28091e7273529f0913311111ae23332&#34;&gt;directory&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
    recipe1
    ├── app
    │   ├── bower_compornents #1 bower js lib install dir
    │   ├── css
    │   ├── index.html
    │   ├── js
    │   │   └── app.js       #4 target js
    │   └── test              #2 test files
    │        └── app.spec.js  #4 test js
    ├── .bowerrc      #1 bower install dir 設定
    ├── bower.json    #1 bower install する js lib などの設定
    ├── karma.conf.js #3 angular のテスト設定
    ├── package.json  #2 npm lib などの設定 
    └── node_modules  #2 npm lib install dir
&lt;/code&gt;&lt;/pre&gt;
    

&lt;h2 id=&#34;1-bower:d28091e7273529f0913311111ae23332&#34;&gt;#1 bower&lt;/h2&gt;

&lt;p&gt;js のパッケージ(jqueryなど)を DL してくれる便利パッケージ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
bower init  # コマンドで初期設定 bower.json を作成
bower install angular --save　# または --save-dev
&lt;/code&gt;&lt;/pre&gt;
 

&lt;p&gt;デフォルトは &lt;strong&gt;bower.json&lt;/strong&gt; がある場所がインストール先になるので &lt;strong&gt;.bowerrc&lt;/strong&gt; にインストール先を書いておく。
上記を実施することで以下のファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bower.json&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.bowerrc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.gitignore に bower_components を入れておく（bower install でいつでも同じ環境を構築できるので）。&lt;/li&gt;
&lt;li&gt;bower のオプション &lt;strong&gt;&amp;#x2013;save&lt;/strong&gt; または &lt;strong&gt;&amp;#x2013;save-dev&lt;/strong&gt; を分けることで、本番用と開発用を分けることが出来る。

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bower install &amp;#x2013;production&lt;/strong&gt; で &amp;#x2013;save-dev で入れたパッケージはインストールせずに済むのである。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bower.io/docs/api&#34;&gt;http://bower.io/docs/api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-npm:d28091e7273529f0913311111ae23332&#34;&gt;#2 npm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
npm init 
npm install jasmine --save-dev　# または --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を実施することで以下のファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;.gitignore に node_modules を入れておく（npm install でいつでも同じ環境を構築できるので）。&lt;/li&gt;
&lt;li&gt;npm のオプション &lt;strong&gt;&amp;#x2013;save&lt;/strong&gt; または &lt;strong&gt;&amp;#x2013;save-dev&lt;/strong&gt; を分けることで、本番用と開発用を分けることが出来る(bower と同様ですね)。

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;npm install &amp;#x2013;production&lt;/strong&gt; で &amp;#x2013;save-dev で入れたパッケージはインストールせずに済むのである。&lt;/li&gt;
&lt;li&gt;今回は test 用しかないので &amp;#x2013;save-dev ですべてインストールする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;package.json 内の scripts って便利&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.org/doc/cli/npm-install.html&#34;&gt;https://www.npmjs.org/doc/cli/npm-install.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-karma-angular-の-unit-test-の設定:d28091e7273529f0913311111ae23332&#34;&gt;#3 karma  angular の unit test の設定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
karma init  # コマンドで初期設定 karma.conf.js を作成できる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回特に意識する場所としては以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;basePath

&lt;ul&gt;
&lt;li&gt;基準とするパスなので設定ファイルのある場所 &lt;strong&gt;./&lt;/strong&gt; にする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;files

&lt;ul&gt;
&lt;li&gt;ここで必要な js lib と テストのターゲット js とテスト js を読み込ませてあげる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;browsers

&lt;ul&gt;
&lt;li&gt;init のデフォルトだと Chrome だが、テストするたびに Chrome が開くのは邪魔なので、PhantomJS にする。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;plugins

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jasmine.github.io&#34;&gt;jasmine&lt;/a&gt; を利用するために以下を追加する。

&lt;ul&gt;
&lt;li&gt;karma-jasmine&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;karma から PhantomJS を呼べるようにするために以下を追加する。

&lt;ul&gt;
&lt;li&gt;karma-phantomjs-launcher&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-test-を書く:d28091e7273529f0913311111ae23332&#34;&gt;#4 test を書く&lt;/h2&gt;

&lt;p&gt;テストするうえで jasmine の理解は必須なので &lt;a href=&#34;http://jasmine.github.io/2.1/introduction.html&#34;&gt;tutorial&lt;/a&gt; で勉強しておく。
index.html をローカルで開けばわかると思うが button click で &amp;lsquo;hello&amp;rsquo; とでてくるだけのもの。
テストする js は app.js である。&lt;/p&gt;

&lt;p&gt;テストコードにコメント付与した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
&#39;use strict&#39;;
 
describe(&#39;Unit: app moudle &#39;, function(){
  var scope; # scope がどこからでも呼べるように定義しておく

  beforeEach(function(){
    angular.mock.module(&#39;app&#39;); # モジュールのモックを作成する
  });

  describe(&#39;MainCtrl&#39;, function(){
    # ここで DI する。今回は MainCtrl cotroller で GET, POST など何もしていないので
    # $rootScope と $controller のみ
    beforeEach(inject(function($rootScope, $controller){ 
      scope = $rootScope.$new(); # scope を作成して、上記で定義した scope に代入する

      # scope を渡してコントローラを作成する
      # これで scope に controller 内に定義した sayHello 関数などが入る 
      $controller(&#39;MainCtrl&#39;, {&#39;$scope&#39;: scope}); 
    }));

    it(&#39;sayHello&#39;, function(){
      scope.sayHello();
      # scope.message が &#39;hello&#39; となっているかテスト
      expect(scope.message).toBe(&#39;hello&#39;);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;angular.mock.module を利用するうえで、bower.json に記述のある angular-mocks は必要。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ:d28091e7273529f0913311111ae23332&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;controller のテストは意外と簡単。ただし、DI が増えてくるとハマるポイントも多くなってくるので、次はそんなサンプルを書いていくつもり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で JavaScript の開発環境を整える</title>
      <link>http://syati.github.io/blog/post/emacsJavascript/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/emacsJavascript/</guid>
      <description>

&lt;p&gt;開発環境はとっても大事なんですが、構築までに時間がかかりますよね。ということで私の環境を忘れないうちにメモ！！&lt;/p&gt;

&lt;h1 id=&#34;前提:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ubuntu 12.04 or OSX&lt;/li&gt;
&lt;li&gt;emacs &amp;gt;= 24&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;構築:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;構築&lt;/h1&gt;

&lt;h2 id=&#34;パッケージ管理にmelpa追加:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;パッケージ管理にmelpa追加&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(require &#39;package)
(add-to-list &#39;package-archives
  &#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;) t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;パッケージ管理からインストール:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;パッケージ管理からインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;M-x package-list-package で以下の2点をインストールする（該当箇所で &lt;strong&gt;i&lt;/strong&gt; をタイプしてマークをつけて &lt;strong&gt;x&lt;/strong&gt; でインストールする）

&lt;ol&gt;
&lt;li&gt;flycheck&lt;/li&gt;
&lt;li&gt;js2-mode&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(add-hook &#39;after-init-hook #&#39;global-flycheck-mode)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . js2-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jshint-をインストール:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;jshint をインストール&lt;/h2&gt;

&lt;p&gt;上記をインストールすることで、javascript の文法エラーなどを捕まえてくれる。
-   npm をインストール
    -   ubuntu の場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sudo apt-get install npm
-   OSX の場合

        brew install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;jshint をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install jshint -g
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;オプション -g でグローバルで利用するということ。付けない場合は、カレントディレクトリにインストールされる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;試す:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;試す&lt;/h1&gt;

&lt;p&gt;a.js とでもファイルを作ってみると emacsの下の帯に　(javascript-IDE FlyC) となっていることが確認できる。
後は適当にプログラムを書けば jshint がはしり、文法エラーなどを教えてくれる。&lt;/p&gt;

&lt;h1 id=&#34;参考:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://melpa.milkbox.net/#/getting-started&#34;&gt;melpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/js2-mode/&#34;&gt;js2-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>node 利用するなら、まずは環境変数を設定しましょう</title>
      <link>http://syati.github.io/blog/post/node_path/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/node_path/</guid>
      <description>

&lt;p&gt;javascript を REPL で利用できるといえば &lt;strong&gt;node&lt;/strong&gt; 。underscore.js を試したいと思いハマったメモ。&lt;/p&gt;

&lt;h1 id=&#34;はまった事:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;はまった事&lt;/h1&gt;

&lt;p&gt;以下の通り、グローバルにunderscoreをいれてnodeを起動したのちunderscoreを読み込むとエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Syati% sudo npm install undersocre -g
Syati% node 

require(&#39;underscore&#39;); 
Error: Cannot find module &#39;underscore&#39;
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at repl:1:1
    at REPLServer.self.eval (repl.js:109:21)
    at rli.on.self.bufferedCmd (repl.js:258:20)
    at REPLServer.self.eval (repl.js:116:5)
    at Interface.&amp;lt;anonymous&amp;gt; (repl.js:248:12)
    at Interface.EventEmitter.emit (events.js:96:17)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;原因:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;npmでインストールしたnode_modulesのパスを環境変数に設定していなかっただけ。&lt;/p&gt;

&lt;h1 id=&#34;解決:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;解決&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;設定するパスを確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm root -g
// output =&amp;gt; /usr/local/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利用ターミナル(bash なら .bashrc、zsh なら .zshrc ）に１の結果を以下のように追加して終了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export NODE_PATH=/usr/local/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>bowerrc で install ディレクトリを変更する</title>
      <link>http://syati.github.io/blog/post/bowerrc/</link>
      <pubDate>Sun, 01 Mar 2015 21:37:06 JST</pubDate>
      
      <guid>http://syati.github.io/blog/post/bowerrc/</guid>
      <description>

&lt;p&gt;bower install をしたはいいが、デフォルトでインストールされるディレクトリ(bower_components)を以下の例のように変えたい、そんな時は。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;解決策:faaade8871e8a9add4cb3dea3150f715&#34;&gt;解決策&lt;/h1&gt;

&lt;p&gt;以下のように &lt;strong&gt;.bowerrc&lt;/strong&gt; を project ルートに作成してあげる。これを自分の好きなように書き換えることで、インストールディレクトリを変更できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// .bowerrc
{
    &amp;quot;directory&amp;quot; : &amp;quot;js/bower_components&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降、bower install すれば希望通り&lt;/p&gt;

&lt;h2 id=&#34;bowerrc作成後:faaade8871e8a9add4cb3dea3150f715&#34;&gt;.bowerrc作成後&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;li&gt;.bowerrc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考:faaade8871e8a9add4cb3dea3150f715&#34;&gt;参考&lt;/h1&gt;

&lt;h2 id=&#34;デフォルトの動作:faaade8871e8a9add4cb3dea3150f715&#34;&gt;デフォルトの動作&lt;/h2&gt;

&lt;h3 id=&#34;初期ディレクトリ構成:faaade8871e8a9add4cb3dea3150f715&#34;&gt;初期ディレクトリ構成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コマンド:faaade8871e8a9add4cb3dea3150f715&#34;&gt;コマンド&lt;/h3&gt;

&lt;p&gt;project ルートで 以下のように bower コマンドを入れる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower init
bower install jquery -save
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コマンド後のディレクトリ構成:faaade8871e8a9add4cb3dea3150f715&#34;&gt;コマンド後のディレクトリ構成&lt;/h3&gt;

&lt;p&gt;ディレクトリは以下のようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
