<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on Syati.info </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.syati.info/categories/javascript/</link>
    <language>ja-JP</language>
    
    <copyright>Copyright (c) 2008 - 2015, mizuki-y; all rights reserved.</copyright>
    <updated>Tue, 29 Dec 2015 12:38:07 JST</updated>
    
    <item>
      <title>Sequelize Part 1 - 導入してREPLで試してみる</title>
      <link>http://blog.syati.info/post/sequelize_getting_started/</link>
      <pubDate>Tue, 29 Dec 2015 12:38:07 JST</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_getting_started/</guid>
      <description>

&lt;p&gt;ちょっと前まで MEAN とか流行っていた気がするんですが、今はどうなんですかね？実際にちょっとしたWEBサービスで利用してみると、MongoDB が思った以上に厄介だった。トランザクションが無いのが、どうしても辛い。後々考えると面倒くさいことになるのは目に見えているのでヤメヤメ。ということで従来通り RDB を利用、そして、ORM は &lt;strong&gt;Sequelize&lt;/strong&gt; を利用したので、その辺をメモっていきたいと思う。&lt;/p&gt;

&lt;p&gt;以降で説明するコードは、&lt;a href=&#34;https://github.com/Syati/sequelize-sample/tree/master/01_repl&#34;&gt;01_repl&lt;/a&gt; にあります。&lt;/p&gt;

&lt;h2 id=&#34;環境:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OSX 10.10.5&lt;/li&gt;
&lt;li&gt;Node 5.3.0&lt;/li&gt;
&lt;li&gt;MariaDB 10.1.9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;orm-導入に際して:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;ORM 導入に際して&lt;/h2&gt;

&lt;p&gt;Node で RDB を利用するために、ORM のライブラリを検討。意外とあるもんですね。
以下に github の star と fork 数をまとめる(2015/12/29 調べ)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lib&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Star&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Fork&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;waterline&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2541&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;359&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/tgriesser/bookshelf&#34;&gt;bookshelf&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2824&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;228&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/dresende/node-orm2&#34;&gt;node-orm2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1655&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;282&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/sequelize/sequelize&#34;&gt;sequelize&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5344&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1160&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;それぞれの Lib の差異はわかりませんが Star と Fork 数で判断して、&lt;strong&gt;Sequelize で決定&lt;/strong&gt;。ドキュメントも見やすかったのでいいかな。&lt;/p&gt;

&lt;h2 id=&#34;1-db-orm-orm-cli-のインストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1. DB・ORM・ORM-CLI のインストール&lt;/h2&gt;

&lt;h3 id=&#34;1-1-db-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.1. DB インストール&lt;/h3&gt;

&lt;p&gt;mysql, posgre がある場合は不要。今回は mariadb を利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update
$ brew install mariadb 

$ unset TMPDIR
$ mysql_install_db

## start mariadb
$ mysql.server start

## connect mariadb
$ mysql -uroot
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/mariadb/building-mariadb-on-mac-os-x-using-homebrew/&#34;&gt;Building MariaDB on Mac OS X Using Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-2-orm-sequelize-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.2. ORM (Sequelize) インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save sequelize
$ npm install --save mysql // For both mysql and mariadb dialects
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-orm-cli-sequelize-cli-インストール:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;1.3. ORM-CLI (Sequelize CLI) インストール&lt;/h3&gt;

&lt;p&gt;初期設定、モデル作成、マイグレーション など便利なので CLI をいれる。
コマンドラインをグローバルで利用したいので &lt;strong&gt;g&lt;/strong&gt; 付与する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g sequelize-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-各種設定:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2. 各種設定&lt;/h2&gt;

&lt;p&gt;現状の dir 構成は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sample_prj
├── node_modules
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-db-作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2.1. DB 作成&lt;/h3&gt;

&lt;p&gt;今回利用する DB を &lt;strong&gt;seq_dev&lt;/strong&gt; として、 mariadb に作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -uroot
## mariadb に接続後、今回利用するデータベースを作成する
$ create database seq_dev character set utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-初期設定:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;2.2. 初期設定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.3&lt;/strong&gt; でインストールした Sequelize CLI を用いて初期設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sequelize init #プロジェクトルートで実行。初期設定を作成する

# dir 構成は以下になる
sample_prj
├── config     # config.json に DB の初期設定が書き出される
├── migrations # cli で model:create した際、migration が自動作成される
├── models     # cli で model:create した際、model が自動作成される
├── node_modules
├── package.json
└── seeders    # cli で seed:create した際、seed が自動作成される

# 基本的に上記は .sequelizerc にてカスタマイズ可能
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;config/config.json&lt;/strong&gt; に初期設定があるが、先ほど作成したデータベース名と異なっているので変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// サンプル config.json
{
  &amp;quot;development: {
    &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;,
    &amp;quot;password&amp;quot;: null,
    &amp;quot;database&amp;quot;: &amp;quot;seq_dev&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;dialect&amp;quot;: &amp;quot;mysql&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-はじめてのモデル作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3. はじめてのモデル作成&lt;/h2&gt;

&lt;h3 id=&#34;3-1-model-の作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3.1. model の作成&lt;/h3&gt;

&lt;p&gt;models ディレクトリに model.js のように手動でモデルを作成しても良いのだが、CLI を利用してモデルを作成してあげると、マイグレーションも一緒に作成してくれるので、CLI を利用すると楽かもしれない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ただし、&lt;a href=&#34;http://stackoverflow.com/questions/27835801/how-to-auto-generate-migrations-with-sequelize-cli-from-sequelize-models&#34;&gt;作成したモデルを変更しても該当マイグレーションを更新する術がない&lt;/a&gt;&lt;/strong&gt;ので、手動で変更してあげる必要がある。django みたいに model から migration が作成できたら良いんだけどな・・。&lt;/p&gt;

&lt;p&gt;いざ、モデル作成。プロジェクトルートで以下のコマンドを叩く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sequelize model:create --name User --attributes firstName:string,lastName:string

## models が以下のようになる
models
├── index.js
└── user.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下テーブルを作成することになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id (自動作成)&lt;/li&gt;
&lt;li&gt;firstName&lt;/li&gt;
&lt;li&gt;lastName&lt;/li&gt;
&lt;li&gt;createdAt (自動作成)&lt;/li&gt;
&lt;li&gt;updatedAt (自動作成)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんで複数形？っていうのは、以下の通り。基本的に定義したモデルの複数形がテーブルになる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, sequelize will automatically transform all passed model names (first parameter of define) into plural.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;id の自動作成は、明確に記載されてないんだけど（どこかにあるのかな）、以下が効いてると思われる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sequelize will assume your table has a id primary key property by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;createdAt, updatedAt の自動作成は通り。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sequelize will then automatically add the attributes createdAt and updatedAt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;自動作成を無効にしたい！！カスタマイズしたいということは、もちろん可能。以下の参考へ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/legacy/#primary-keys&#34;&gt;PrimaryKey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/models-definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-models-の-index-js-について:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;3.2. models の index.js について&lt;/h3&gt;

&lt;p&gt;models dir には index.js が sequelize init によって作成されるが、これは models ディレクトリにある全ファイルを読み込んで、モデルを構築してくれる。その際に、モデル間のリレーションも一緒に構築する。利用する際には、index.js を読み込んで、該当モデルを利用することになる。(ES6 利用)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 利用例
const models = require(&#39;./models&#39;);

const User = models.User;
User.findAll().then((users) =&amp;gt; console.log(users));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-試してみる:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4. 試してみる&lt;/h2&gt;

&lt;h3 id=&#34;4-1-エントリポイントの作成:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4.1. エントリポイントの作成&lt;/h3&gt;

&lt;p&gt;とりあえず色々試してみたいので、repl できるようにプロジェクトルートに &lt;strong&gt;repl.js&lt;/strong&gt; とでもしてエントリポイントを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// repl.js
const models = require(&#39;./models&#39;);

models.sequelize.sync({force:true}).then(() =&amp;gt; {
  console.log(&amp;quot;DEV DATA CREATED SUCCESSFULLY&amp;quot;);
});

module.exports = models;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記ですが、sync メソッドで、定義したモデルをDBに反映する。force:true オプションを与えることで、毎回 テーブルを Drop して Create してくれる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本番では migration を利用する&lt;/strong&gt;ことになると思いますが、開発環境や、とりあえず試めすくらいには 、スキームを変更するのが楽なので、force:true でも良い気がする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/sequelize/#sync&#34;&gt;sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-2-node-replで試す:d0405ca9cb7f9fb6a32a84decaf220bd&#34;&gt;4.2. Node REPLで試す&lt;/h3&gt;

&lt;p&gt;REPL を起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下を打ち込んで試してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// repl 内
const models = require(&#39;./repl&#39;);
const User = models.User;

// ユーザ作成
User.create({
    firstName: &#39;Yamada&#39;, 
    lastName: &#39;Tarou&#39;
}).then((user) =&amp;gt; console.log(JSON.stringify(user)));
// 出力
// &amp;gt; Executing (default): INSERT INTO `Users` (`id`,`firstName`,`lastName`,`updatedAt`,`createdAt`) VALUES (DEFAULT,&#39;Yamada&#39;,&#39;Tarou&#39;,&#39;2015-12-30 03:10:38&#39;,&#39;2015-12-30 03:10:38&#39;);
// {&amp;quot;id&amp;quot;:1,&amp;quot;firstName&amp;quot;:&amp;quot;Yamada&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Tarou&amp;quot;,&amp;quot;updatedAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;}

// ユーザ取得
User.findAll().then((users) =&amp;gt; console.log(JSON.stringify(users)));
// 出力
// &amp;gt; Executing (default): SELECT `id`, `firstName`, `lastName`, `createdAt`, `updatedAt` FROM `Users` AS `User`;
// [{&amp;quot;id&amp;quot;:1,&amp;quot;firstName&amp;quot;:&amp;quot;Yamada&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Tarou&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;,&amp;quot;updatedAt&amp;quot;:&amp;quot;2015-12-30T03:10:38.000Z&amp;quot;}]

// ※出力を見やすくするため JSON.stringify しています
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その他メソッド

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/model/&#34;&gt;http://docs.sequelizejs.com/en/latest/api/model/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Project.create({name: &amp;ldquo;aho&amp;rdquo;});
let user = User.create({
    firstName: &amp;lsquo;Yamada&amp;rsquo;,
    lastName: &amp;lsquo;Tarou&amp;rsquo;
}).then((user) =&amp;gt; user)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>package.json を一括更新</title>
      <link>http://blog.syati.info/post/upgrade_package_json/</link>
      <pubDate>Wed, 07 Oct 2015 22:00:32 JST</pubDate>
      
      <guid>http://blog.syati.info/post/upgrade_package_json/</guid>
      <description>

&lt;p&gt;package.json の dependencies を、どうやって一括で更新するのかなと思ってたら！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで簡単に更新できる！！&lt;/p&gt;

&lt;h2 id=&#34;更新する:fa2289da0f3da34235594a1a0c6afa63&#34;&gt;更新する&lt;/h2&gt;

&lt;p&gt;以下の通り。すごく簡単だね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g npm-check-updates
# package.json のあるフォルダで
$ ncu -u
 body-parser    ~1.8.1  →  ~1.14.1 
 cookie-parser  ~1.3.3  →   ~1.4.0 
 debug          ~2.0.0  →   ~2.2.0 
 jade           ~1.6.0  →  ~1.11.0 
 mongoose       ~4.0.8  →  ~4.1.10 
 morgan         ~1.3.0  →   ~1.6.1 
 serve-favicon  ~2.1.3  →   ~2.3.0
 
Upgraded /your/path/package.json
 
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一括更新完了！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で Javascript なら js2-mode, tern-mode</title>
      <link>http://blog.syati.info/post/emacsJavascript2/</link>
      <pubDate>Mon, 31 Aug 2015 13:38:35 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacsJavascript2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/emacsJavascript/&#34;&gt;Emacs で JavaScript の開発環境を整える&lt;/a&gt; で、
Emacs と Javascript の開発環境を記しましたが、さらに改善できたので、メモメモ。&lt;/p&gt;

&lt;p&gt;ドットで jquery も underscore も browser もしてくれる。 angular も!!&lt;/p&gt;

&lt;h2 id=&#34;step-1-tern-のインストール-設定:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 1 tern のインストール・設定&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;npm で tern をインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g tern
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.tern-config を以下のような感じで作成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;libs&amp;quot;: [
    &amp;quot;browser&amp;quot;,
    &amp;quot;jquery&amp;quot;,
    &amp;quot;ecma5&amp;quot;,
    &amp;quot;underscore&amp;quot;
  ],
  &amp;quot;plugins&amp;quot;: {
    &amp;quot;angular&amp;quot;: {},
    &amp;quot;Node&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-2-emacs-の-package-をインストール:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 2 emacs の package をインストール&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;M-x package-list-package で以下の2点をインストールする（該当箇所で &lt;strong&gt;i&lt;/strong&gt; をタイプしてマークをつけて &lt;strong&gt;x&lt;/strong&gt; でインストールする）

&lt;ol&gt;
&lt;li&gt;tern&lt;/li&gt;
&lt;li&gt;js2-mode&lt;/li&gt;
&lt;li&gt;tern-auto-complete&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(autoload &#39;js2-mode &amp;quot;js2-mode&amp;quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . js2-mode))


(add-hook &#39;js2-mode-hook
    (lambda ()
        (tern-mode t)))


(eval-after-load &#39;tern
    &#39;(progn
        (require &#39;tern-auto-complete)
        (tern-ac-setup)))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3-試す:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;Step 3 試す&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular
  .module(&#39;MyApp&#39;, [])
  .controller(&#39;SomeCtrl&#39;, function($scope, $http) {
    # ここで $scope. とでも入れてみる
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:3f7d9efd2043d47de4f96647460d1d8a&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ternjs.net/doc/manual.html&#34;&gt;tern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/js2-mode/&#34;&gt;js2-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Angular test sample 1</title>
      <link>http://blog.syati.info/post/angular-test-sample-recipe1/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://blog.syati.info/post/angular-test-sample-recipe1/</guid>
      <description>

&lt;p&gt;js ってテストしにくいよねってことで今流行りの angular で unit test する。
最初なので、事細かに説明するつもりで書いてみる。&lt;/p&gt;

&lt;p&gt;サンプルは以下から git clone してください。ソースと突き合わせながら見るといいかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Syati/angular-test-sample&#34;&gt;https://github.com/Syati/angular-test-sample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;準備:d28091e7273529f0913311111ae23332&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;ubuntu:d28091e7273529f0913311111ae23332&#34;&gt;ubuntu&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;node &amp;amp; npm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install nodejs
$ sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac:d28091e7273529f0913311111ae23332&#34;&gt;mac&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;node &amp;amp; npm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install node
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;共通:d28091e7273529f0913311111ae23332&#34;&gt;共通&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;karma&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install -g karma-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実施-サンプルを-clone-して-test:d28091e7273529f0913311111ae23332&#34;&gt;実施：サンプルを CLONE して TEST&lt;/h2&gt;

&lt;p&gt;github にサンプルを書いたので clone する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:Syati/angular-test-sample.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;prj-依存環境を入れる:d28091e7273529f0913311111ae23332&#34;&gt;prj 依存環境を入れる&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd your_clone_path/angular-test-sample/controller/recipe1
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-実行する:d28091e7273529f0913311111ae23332&#34;&gt;test 実行する&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のような出力で、テストが成功する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARN [karma]: Port 9876 in use
INFO [karma]: Karma v0.12.24 server started at http://localhost:9877/
INFO [launcher]: Starting browser PhantomJS
INFO [PhantomJS 1.9.8 (Linux)]: Connected on socket -9tnO3qPnHscs3zVjS4l with id 62869514
PhantomJS 1.9.8 (Linux): Executed 1 of 1 SUCCESS (0.038 secs / 0.007 secs)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;説明:d28091e7273529f0913311111ae23332&#34;&gt;説明&lt;/h2&gt;

&lt;h3 id=&#34;directory:d28091e7273529f0913311111ae23332&#34;&gt;directory&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    recipe1
    ├── app
    │   ├── bower_compornents #1 bower js lib install dir
    │   ├── css
    │   ├── index.html
    │   ├── js
    │   │   └── app.js       #4 target js
    │   └── test              #2 test files
    │        └── app.spec.js  #4 test js
    ├── .bowerrc      #1 bower install dir 設定
    ├── bower.json    #1 bower install する js lib などの設定
    ├── karma.conf.js #3 angular のテスト設定
    ├── package.json  #2 npm lib などの設定 
    └── node_modules  #2 npm lib install dir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-bower:d28091e7273529f0913311111ae23332&#34;&gt;#1 bower&lt;/h3&gt;

&lt;p&gt;js のパッケージ(jqueryなど)を DL してくれる便利パッケージ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bower init  # コマンドで初期設定 bower.json を作成
$ bower install angular --save　# または --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトは &lt;strong&gt;bower.json&lt;/strong&gt; がある場所がインストール先になるので &lt;strong&gt;.bowerrc&lt;/strong&gt; にインストール先を書いておく。
上記を実施することで以下のファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bower.json&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.bowerrc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.gitignore に bower_components を入れておく（bower install でいつでも同じ環境を構築できるので）。&lt;/li&gt;
&lt;li&gt;bower のオプション &lt;strong&gt;&amp;#x2013;save&lt;/strong&gt; または &lt;strong&gt;&amp;#x2013;save-dev&lt;/strong&gt; を分けることで、本番用と開発用を分けることが出来る。

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bower install &amp;#x2013;production&lt;/strong&gt; で &amp;#x2013;save-dev で入れたパッケージはインストールせずに済むのである。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bower.io/docs/api&#34;&gt;http://bower.io/docs/api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-npm:d28091e7273529f0913311111ae23332&#34;&gt;#2 npm&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm init 
$ npm install jasmine --save-dev　# または --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を実施することで以下のファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;.gitignore に node_modules を入れておく（npm install でいつでも同じ環境を構築できるので）。&lt;/li&gt;
&lt;li&gt;npm のオプション &lt;strong&gt;&amp;#x2013;save&lt;/strong&gt; または &lt;strong&gt;&amp;#x2013;save-dev&lt;/strong&gt; を分けることで、本番用と開発用を分けることが出来る(bower と同様ですね)。

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;npm install &amp;#x2013;production&lt;/strong&gt; で &amp;#x2013;save-dev で入れたパッケージはインストールせずに済むのである。&lt;/li&gt;
&lt;li&gt;今回は test 用しかないので &amp;#x2013;save-dev ですべてインストールする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;package.json 内の scripts って便利&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.org/doc/cli/npm-install.html&#34;&gt;https://www.npmjs.org/doc/cli/npm-install.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-karma-angular-の-unit-test-の設定:d28091e7273529f0913311111ae23332&#34;&gt;#3 karma  angular の unit test の設定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;karma init  # コマンドで初期設定 karma.conf.js を作成できる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回特に意識する場所としては以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;basePath

&lt;ul&gt;
&lt;li&gt;基準とするパスなので設定ファイルのある場所 &lt;strong&gt;./&lt;/strong&gt; にする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;files

&lt;ul&gt;
&lt;li&gt;ここで必要な js lib と テストのターゲット js とテスト js を読み込ませてあげる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;browsers

&lt;ul&gt;
&lt;li&gt;init のデフォルトだと Chrome だが、テストするたびに Chrome が開くのは邪魔なので、PhantomJS にする。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;plugins

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jasmine.github.io&#34;&gt;jasmine&lt;/a&gt; を利用するために以下を追加する。

&lt;ul&gt;
&lt;li&gt;karma-jasmine&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;karma から PhantomJS を呼べるようにするために以下を追加する。

&lt;ul&gt;
&lt;li&gt;karma-phantomjs-launcher&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-test-を書く:d28091e7273529f0913311111ae23332&#34;&gt;#4 test を書く&lt;/h3&gt;

&lt;p&gt;テストするうえで jasmine の理解は必須なので &lt;a href=&#34;http://jasmine.github.io/2.1/introduction.html&#34;&gt;tutorial&lt;/a&gt; で勉強しておく。
index.html をローカルで開けばわかると思うが button click で &amp;lsquo;hello&amp;rsquo; とでてくるだけのもの。
テストする js は app.js である。&lt;/p&gt;

&lt;p&gt;テストコードにコメント付与した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;
 
describe(&#39;Unit: app moudle &#39;, function(){
  var scope; # scope がどこからでも呼べるように定義しておく

  beforeEach(function(){
    angular.mock.module(&#39;app&#39;); # モジュールのモックを作成する
  });

  describe(&#39;MainCtrl&#39;, function(){
    # ここで DI する。今回は MainCtrl cotroller で GET, POST など何もしていないので
    # $rootScope と $controller のみ
    beforeEach(inject(function($rootScope, $controller){ 
      scope = $rootScope.$new(); # scope を作成して、上記で定義した scope に代入する

      # scope を渡してコントローラを作成する
      # これで scope に controller 内に定義した sayHello 関数などが入る 
      $controller(&#39;MainCtrl&#39;, {&#39;$scope&#39;: scope}); 
    }));

    it(&#39;sayHello&#39;, function(){
      scope.sayHello();
      # scope.message が &#39;hello&#39; となっているかテスト
      expect(scope.message).toBe(&#39;hello&#39;);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;angular.mock.module を利用するうえで、bower.json に記述のある angular-mocks は必要。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ:d28091e7273529f0913311111ae23332&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;controller のテストは意外と簡単。ただし、DI が増えてくるとハマるポイントも多くなってくるので、次はそんなサンプルを書いていくつもり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs で JavaScript の開発環境を整える</title>
      <link>http://blog.syati.info/post/emacsJavascript/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://blog.syati.info/post/emacsJavascript/</guid>
      <description>

&lt;p&gt;開発環境はとっても大事なんですが、構築までに時間がかかりますよね。
ということで私の環境を忘れないうちにメモ！！&lt;/p&gt;

&lt;h2 id=&#34;前提:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ubuntu 12.04 or OSX&lt;/li&gt;
&lt;li&gt;emacs &amp;gt;= 24&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;構築:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;構築&lt;/h2&gt;

&lt;h3 id=&#34;パッケージ管理にmelpa追加:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;パッケージ管理にmelpa追加&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(require &#39;package)
(add-to-list &#39;package-archives
  &#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;) t)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;パッケージ管理からインストール:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;パッケージ管理からインストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;M-x package-list-package で以下の2点をインストールする（該当箇所で &lt;strong&gt;i&lt;/strong&gt; をタイプしてマークをつけて &lt;strong&gt;x&lt;/strong&gt; でインストールする）

&lt;ol&gt;
&lt;li&gt;flycheck&lt;/li&gt;
&lt;li&gt;js2-mode&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;~/.emacs.d/init.el に以下を追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;(add-hook &#39;after-init-hook #&#39;global-flycheck-mode)
(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.js\\&#39;&amp;quot; . js2-mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;jshint-をインストール:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;jshint をインストール&lt;/h3&gt;

&lt;p&gt;上記をインストールすることで、javascript の文法エラーなどを捕まえてくれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm をインストール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ubuntu の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OSX の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install npm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;jshint をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install jshint -g
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;オプション -g でグローバルで利用するということ。付けない場合は、カレントディレクトリにインストールされる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;試す:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;試す&lt;/h2&gt;

&lt;p&gt;a.js とでもファイルを作ってみると emacsの下の帯に　(javascript-IDE FlyC) となっていることが確認できる。
後は適当にプログラムを書けば jshint がはしり、文法エラーなどを教えてくれる。&lt;/p&gt;

&lt;h2 id=&#34;参考:1a9908f99c55ee21878c3c149440fb4d&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://melpa.milkbox.net/#/getting-started&#34;&gt;melpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/js2-mode/&#34;&gt;js2-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>node 利用するなら、まずは環境変数を設定しましょう</title>
      <link>http://blog.syati.info/post/node_path/</link>
      <pubDate>Thu, 04 Jun 2015 23:09:38 JST</pubDate>
      
      <guid>http://blog.syati.info/post/node_path/</guid>
      <description>

&lt;p&gt;javascript を REPL で利用できるといえば &lt;strong&gt;node&lt;/strong&gt; 。underscore.js を試したいと思いハマったメモ。&lt;/p&gt;

&lt;h2 id=&#34;はまった事:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;はまった事&lt;/h2&gt;

&lt;p&gt;以下の通り、グローバルにunderscoreをいれてnodeを起動したのちunderscoreを読み込むとエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install undersocre -g
$ node 
    
require(&#39;underscore&#39;); 
Error: Cannot find module &#39;underscore&#39;
  at Function.Module._resolveFilename (module.js:338:15)
  at Function.Module._load (module.js:280:25)
  at Module.require (module.js:362:17)
  at require (module.js:378:17)
  at repl:1:1
  at REPLServer.self.eval (repl.js:109:21)
  at rli.on.self.bufferedCmd (repl.js:258:20)
  at REPLServer.self.eval (repl.js:116:5)
  at Interface.&amp;lt;anonymous&amp;gt; (repl.js:248:12)
  at Interface.EventEmitter.emit (events.js:96:17)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;npmでインストールしたnode_modulesのパスを環境変数に設定していなかっただけ。&lt;/p&gt;

&lt;h2 id=&#34;解決:27ef1157700a533f7be8bb419ba8b42a&#34;&gt;解決&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;設定するパスを確認する&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm root -g
/usr/local/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;利用ターミナル(bash なら .bashrc、zsh なら .zshrc ）に１の結果を以下のように追加して終了&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export NODE_PATH=/usr/local/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>bowerrc で install ディレクトリを変更する</title>
      <link>http://blog.syati.info/post/bowerrc/</link>
      <pubDate>Sun, 01 Mar 2015 21:37:06 JST</pubDate>
      
      <guid>http://blog.syati.info/post/bowerrc/</guid>
      <description>

&lt;p&gt;bower install をしたはいいが、デフォルトでインストールされるディレクトリ(bower_components)を以下の例のように変えたい、そんな時は。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解決策:faaade8871e8a9add4cb3dea3150f715&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;以下のように &lt;strong&gt;.bowerrc&lt;/strong&gt; を project ルートに作成してあげる。これを自分の好きなように書き換えることで、インストールディレクトリを変更できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// .bowerrc
{
    &amp;quot;directory&amp;quot; : &amp;quot;js/bower_components&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降、bower install すれば希望通り&lt;/p&gt;

&lt;h3 id=&#34;bowerrc作成後:faaade8871e8a9add4cb3dea3150f715&#34;&gt;.bowerrc作成後&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;li&gt;.bowerrc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考:faaade8871e8a9add4cb3dea3150f715&#34;&gt;参考&lt;/h2&gt;

&lt;h3 id=&#34;デフォルトの動作:faaade8871e8a9add4cb3dea3150f715&#34;&gt;デフォルトの動作&lt;/h3&gt;

&lt;h4 id=&#34;初期ディレクトリ構成:faaade8871e8a9add4cb3dea3150f715&#34;&gt;初期ディレクトリ構成&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;コマンド:faaade8871e8a9add4cb3dea3150f715&#34;&gt;コマンド&lt;/h4&gt;

&lt;p&gt;project ルートで 以下のように bower コマンドを入れる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower init
bower install jquery -save
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;コマンド後のディレクトリ構成:faaade8871e8a9add4cb3dea3150f715&#34;&gt;コマンド後のディレクトリ構成&lt;/h4&gt;

&lt;p&gt;ディレクトリは以下のようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;project/

&lt;ul&gt;
&lt;li&gt;bower_components

&lt;ul&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sequelize Part 2 - リレーションについて</title>
      <link>http://blog.syati.info/post/sequelize_relation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://blog.syati.info/post/sequelize_relation/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.syati.info/post/sequelize_getting_started/&#34;&gt;Sequelize Part 1&lt;/a&gt; で、なんとなくわかってきた！！と思うので、今回は、リレーションについて学ぶ。後々、WEBアプリケーションフレームワークから利用する際、ここら辺の理解は必須ですからね。&lt;/p&gt;

&lt;h2 id=&#34;1-リレーションの種類:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1. リレーションの種類&lt;/h2&gt;

&lt;p&gt;リレーションを理解するためには、&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/&#34;&gt;Relations / Associations&lt;/a&gt; を読み込まないと始まらない。結構ボリュームがあって、心折れそうになりますが！！実は大したことはないはず・・・。まずは、少しだけ用語の説明。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When calling a method such as User.hasOne(Project), we say that the User model (the model that the function is being invoked on) is the source and the Project model (the model being passed as an argument) is the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;単なる呼び方ですね。先に出てくるモデルが &lt;strong&gt;source&lt;/strong&gt; 。後に出てくるモデルが &lt;strong&gt;target&lt;/strong&gt; ですよってことですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 以下の場合
User.hasOne(Project)
// User モデルが source
// Project モデルが target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、外部キーがどちらに追加されるのかを明記するために利用する。リレーションは、以降の4種類（メソッド）ある。&lt;/p&gt;

&lt;h3 id=&#34;1-1-belongsto:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.1. belongsTo&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プレイヤ belongs to チーム&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Players

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;attributes&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TeamId (belongsTo によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Teams

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;attributes&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#belongsto&#34;&gt;belongsTo&lt;/a&gt; では &lt;strong&gt;source (Player)&lt;/strong&gt; に外部キー（&lt;strong&gt;TeamId&lt;/strong&gt;）が追加される。また、Player インスタンスは、&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/belongs-to/&#34;&gt;belongsTo - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※外部キーが camelCase&lt;/strong&gt; ！？という方は、&lt;a href=&#34;#2-2-underscored-外部キーの命名規則を-camelcase-から-underscored-にする:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.2. underscored: 外部キーの命名規則を camelCase から underscored にする&lt;/a&gt; を参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;1-2-hasone:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.2. hasOne&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ユーザ has one プロフィール&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = sequelize.define(&#39;User&#39;, {/* ... */})
var Profile = sequelize.define(&#39;Profile&#39;, {/* ... */})
 
User.hasOne(Profile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Profiles

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserId (hasOne によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;(http://docs.sequelizejs.com/en/latest/docs/associations/#hasone&#34;&gt;hasOne&lt;/a&gt; では &lt;strong&gt;target (Profile)&lt;/strong&gt; に外部キー（&lt;strong&gt;UserId&lt;/strong&gt;）が追加される。&lt;strong&gt;belongsTo とその点が違うことに注意&lt;/strong&gt;。また、User インスタンスは &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/has-one/&#34;&gt;hasOne - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;h3 id=&#34;1-3-hasmany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.3. hasMany&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プロジェクト has many ユーザ&lt;/strong&gt; という場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})
 
Project.hasMany(User)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記では、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProjectId (hasMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#one-to-many-associations&#34;&gt;hasMany&lt;/a&gt; では &lt;strong&gt;target (User)&lt;/strong&gt; に外部キー（&lt;strong&gt;ProjectId&lt;/strong&gt;）が追加される。これだけ見ると &lt;strong&gt;hasOne と同じじゃないか&lt;/strong&gt;と思うかもしれないが、インスタンスが持つメソッドが異なる。Project インスタンスは &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/has-many/&#34;&gt;hasMany - api&lt;/a&gt; メソッドを持つ。&lt;/p&gt;

&lt;h3 id=&#34;1-4-belongstomany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.4. belongsToMany&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;プロジェクトは複数のユーザを持ち、ユーザは複数のプロジェクトに属する&lt;/strong&gt; という &lt;strong&gt;多対多&lt;/strong&gt; の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})

Project.belongsToMany(User, {through: &#39;UserProjects&#39;});
User.belongsToMany(Project, {through: &#39;UserProjects&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserProjects   (through オプションで指定した名前のテーブル)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UserId    (belongsToMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProjectId (belongsToMany によって追加される)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/associations/#belongs-to-many-associations&#34;&gt;belongsToMany&lt;/a&gt; では、&lt;strong&gt;through で指定した名前のテーブル&lt;/strong&gt;に双方のキー（ProjectId, UserId）が追加される。また、それぞれのインスタンスに以下のとおり(または &lt;a href=&#34;http://docs.sequelizejs.com/en/latest/api/associations/belongs-to-many/&#34;&gt;belongsToMany - api&lt;/a&gt;) メソッドが追加される。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This will add methods &lt;strong&gt;getUsers, setUsers, addUser,addUsers to Project&lt;/strong&gt;, and &lt;strong&gt;getProjects, setProjects and addProject, addProjects to User&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記の UserProjects （中間テーブル）を見ると分かると思いますが &lt;strong&gt;id&lt;/strong&gt; はありません。理由は以下のとおり。UserId, ProjectId の複合キーで十分なため、別にプライマリキー設ける必要ないでしょって話かな。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default the code above will add ProjectId and UserId to the UserProjects table, and remove any previously defined primary key attribute - the table will be uniquely identified by the combination of the keys of the two tables, and there is no reason to have other PK columns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただし UserProjects モデルを以下のように定義することで、&lt;strong&gt;id&lt;/strong&gt; を追加することや、&lt;strong&gt;status&lt;/strong&gt; カラムを中間テーブルに追加することができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Project = sequelize.define(&#39;Project&#39;, {/* ... */})
var User = sequelize.define(&#39;User&#39;, {/* ... */})

var UserProjects = sequelize.define(&#39;UserProjects&#39;, {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    status: DataTypes.STRING
})

User.belongsToMany(Project, { through: UserProjects })
Project.belongsToMany(User, { through: UserProjects })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-その他-オプション:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2. その他、オプション&lt;/h2&gt;

&lt;h3 id=&#34;2-1-片方向と双方向:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.1. 片方向と双方向&lt;/h3&gt;

&lt;p&gt;以下の違いを覚えておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;片方向（one way）

&lt;ul&gt;
&lt;li&gt;belongsTo&lt;/li&gt;
&lt;li&gt;hasOne&lt;/li&gt;
&lt;li&gt;hasMany&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双方向 (two way)

&lt;ul&gt;
&lt;li&gt;belongsToMany&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;片方向とは、言葉の通りだが、一方からしか取得できないということである。例えば、&lt;strong&gt;プレイヤ belongs to チーム&lt;/strong&gt; という場合で考えると、&lt;strong&gt;プレイヤからチームを取得することは可能&lt;/strong&gt;だが、&lt;strong&gt;チームからプレイヤを取得することは不可能&lt;/strong&gt;ということである。以下コードサンプル。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team);

...

// インスタンス利用
// plyaer インスタンスから team を取得することは可能だが
player.getTeam()
// 以下のように team から プレイヤを取得することはできない
// team.getPlayers()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、&lt;strong&gt;片方向のメソッドを利用して、双方向から取得できるようにする&lt;/strong&gt;には、以下のようにモデルを定義してあげる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {/* ...attributes */})
  , Team  = this.sequelize.define(&#39;Team&#39;, {/* ...attributes */});

Player.belongsTo(Team); // belongsTo を利用
Team.hasMany(Player);   // hasMany を利用
...

// インスタンス利用
// plyaer インスタンスから team を取得することは可能かつ
player.getTeam()
// team から players を取得することが可能。
team.getPlayers()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;双方向については、上記のようなことをする必要はない。双方向を利用した際に、インスタンスにメソッドが追加されるため。&lt;a href=&#34;http://localhost:1313/post/sequelize_relation/#1-4-belongstomany:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;1.4. belongsToMany&lt;/a&gt; 参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;2-2-underscored-外部キーの命名規則を-camelcase-から-underscored-にする:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.2. underscored: 外部キーの命名規則を camelCase から underscored にする&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Foreign keys&lt;/strong&gt; は camelCase になります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default casing is camelCase however if the source model is configured with underscored: true the foreignKey will be snake_case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;もし、&lt;strong&gt;underscored&lt;/strong&gt; のほうがいいよねって場合は、以下のようにしてあげる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Player = this.sequelize.define(&#39;Player&#39;, {
    /* ... */
}, {
    underscored: true
});

var Team  = this.sequelize.define(&#39;Team&#39;, {/* ... */});

Player.belongsTo(Team);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Players

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;team_id (camelCase ではなく _ になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Teams

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-3-as-target-のモデル名を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.3. as: target のモデル名を任意に変更する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;as&lt;/strong&gt; オプションに任意の名前を与えることで、target のモデル名を変更できる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */})
  , Project = sequelize.define(&#39;Project&#39;, {/* ... */})

User.belongsTo(Project, {as: &#39;Prj&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PrjId (ProjectId ではなく as で指定した名前Id になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ここで注意する必要があるのは&lt;/strong&gt; リレーション(belongsToなど)を追加したときにインスタンスに追加されるメソッドである。今回の場合は User インスタンスのもつメソッドが以下になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// as なしの場合、以下のメソッドだが（デフォルト）
user.getProject();

// as ありの場合、以下のメソッド(指定した名前)になる
user.getPrj()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-4-foreignkey-外部キーの名前を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.4. foreignKey: 外部キーの名前を任意に変更する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;foreignKey&lt;/strong&gt; オプションに任意の名前を与えることで、Sequelize の外部キーの命名規則を完全無視できる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */})
  , Project = sequelize.define(&#39;Project&#39;, {/* ... */})

User.belongsTo(Project, {foreignKey: &#39;fk_project&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fk_project (ProjectId ではなく foreignKey で指定した名前になる)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ここで注意する必要があるのは&lt;/strong&gt; as で指定した場合とは異なり、インスタンスのもつメソッドは変わらないということ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// foreginKey あり・なしに関わらず、以下のメソッド（デフォルト）
user.getProject();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-5-targetkey-外部キーをプライマリキーから任意のカラムに変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.5. targetKey: 外部キーをプライマリキーから任意のカラムに変更する&lt;/h3&gt;

&lt;p&gt;以下にある通り、デフォルトの外部キーは target (または source)のプライマリキーになります。belongsTo としか書いてないけど、それ以外も基本同じ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default the target key for a belongsTo relation will be the target primary key. To override this behavior, use the targetKey option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例えば、Project の name カラムを外部キーにする場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var User = this.sequelize.define(&#39;User&#39;, {/* ... */});
var Project = sequelize.define(&#39;Project&#39;, {
    name: { type: DataTypes.STRING, unique: true}
});

User.belongsTo(models.Project, {foreignKey: &#39;fk_projectname&#39;, targetKey: &#39;name&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は、以下のテーブルになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;li&gt;fk_projectname&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;createdAt&lt;/li&gt;
&lt;li&gt;updatedAt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インスタンスのもつメソッドは &lt;a href=&#34;#2-4-foreignkey-外部キーの名前を任意に変更する:4ab89ffec193a533a37a4e4a7c6ae107&#34;&gt;2.4. foreignKey: 外部キーの名前を任意に変更する&lt;/a&gt; と変わりなし&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
